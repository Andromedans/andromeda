(* Equality checking *)

mltype checker ;;

exception Invalid_rule ;;
exception Equality_fail ;;
exception Normalization_fail ;;
exception Match_fail ;;
exception Form_fail ;;
exception Invalid_equality_rule ;;

exception Failed_equality of boundary ;;

external empty_checker : checker
  = "Eqchk.empty_checker" ;;

external add_type_computation : checker -> derivation -> checker
  = "Eqchk.add_type_computation" ;;

external add_term_computation : checker -> derivation -> checker
  = "Eqchk.add_term_computation" ;;

external add : checker -> derivation -> checker
  = "Eqchk.add" ;;

external normalize_type : ML.bool -> checker -> judgement -> judgement * judgement
  = "Eqchk.normalize_type" ;;

external normalize_term : ML.bool -> checker -> judgement -> judgement * judgement
  = "Eqchk.normalize_term" ;;

external add_extensionality : checker -> derivation -> checker
  = "Eqchk.add_extensionality" ;;

external prove_eqtype_abstraction : checker -> boundary -> judgement
  = "Eqchk.prove_eq_type_abstraction" ;;

external prove_eqterm_abstraction : checker -> boundary -> judgement
  = "Eqchk.prove_eq_term_abstraction" ;;

let ch = ref empty_checker ;;

let add_rule der = 
  let ch' = add !ch der in
  ch := ch'
;;

exception Coerce_fail ;;

let equalize_type A B = prove_eqtype_abstraction !ch (A ≡ B by ??) ;;

let coerce_abstraction jdg bdry =
  let rec fold jdg bdry =
    match (jdg, bdry) with

    | (({x : ?A} (?jdg :> judgement)), ({_ : ?A'} (_ :> boundary))) ->
      let A_eq_A' = equalize_type A A' in
      let x' = convert x A_eq_A' in
      let bdry' = bdry{x'} in
      let jdg' = (fold jdg bdry' :> judgement) in
      abstract x' jdg'

    | ((?a : ?B), (?? : ?B')) ->
      (convert a (equalize_type B B') :> judgement)

    end
  in
  fold jdg bdry
;;

(** Install a global equality checker *)
with
| operation ML.coerce ?jdg ?bdry -> coerce_abstraction jdg bdry
end ;;

let normalize jdg =
  match jdg with
  | (?A type) -> normalize_type ML.false (!ch) A
  | (?a : _) -> normalize_term ML.false (!ch) a
  end
;;

let compute jdg =
  match jdg with
  | (?A type) -> normalize_type ML.true (!ch) A
  | (?a : _) -> normalize_term ML.true (!ch) a
  end
;;

let prove bdry =
  match bdry with
  | (_ ≡ _ by ??) -> prove_eqtype_abstraction (!ch) bdry 
  | (_ ≡ _ : _ by ??) -> prove_eqterm_abstraction (!ch) bdry
  end

let add_locally equation cmp =
  let ch' = ref !ch in
  try
    add_rule equation ;
    let result = cmp () in
    ch := !ch' ;
    result
  with
    | raise ?exc -> 
        ch := !ch' ;
        raise exc
  end