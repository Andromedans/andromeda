define Set := val `Universe f0`

assume N : val t`Set`
assume 0 : val t`N`
assume S : val t`N -> N`
assume N_ind : val t`
    forall (P : N -> Set),
      P 0 ->
      (forall n : N, P n -> P (S n)) ->
      forall (m : N), P m
    `
assume N_ind_0 : val t`
    forall 
      (P : N -> Set) 
      (z : P 0)
      (f : forall n : N, P n -> P (S n)),
      N_ind P z f 0 == z
    `

#context
assume N_ind_S :
  val t`
    forall 
      (P : N -> Set) 
      (z : P 0)
      (f : forall n : N, P n -> P (S n))
      (m : N),
    N_ind P z f (S m) == f m (N_ind P z f m)
   `

// define id := `N_ind (fun _ : N => N)`

define id := 
   // makeApp variant
  `N_ind` `(fun _ : N => N)`

define plus :=
   val `
    N_ind
      (fun _ : N => N -> N)
      (fun n : N => n) 
      (fun (n : N) (f : N -> N) (m : N) => S (f m))
   ` 


#context
