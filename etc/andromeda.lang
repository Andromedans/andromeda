<?xml version="1.0" encoding="UTF-8"?>

<!--

 Syntax highlighting for Andromeda in gedit

 To install, simply place this file in the following directory:
 ~/.local/share/gtksourceview-3.0/language-specs

 This is based on gtksourceview's ocaml.lang and may contain inappropriate remains of it.

-->

<language id="andromeda" _name="Andromeda" version="2.0" _section="Source">
  <metadata>
    <property name="mimetypes">text/x-andromeda</property>
    <property name="globs">*.m31</property>
    <property name="block-comment-start">(*</property>
    <property name="block-comment-end">*)</property>
  </metadata>

  <styles>
    <style id="comment" _name="Comment" map-to="def:comment"/>
    <style id="ocamldoc" _name="Ocamldoc Comments" map-to="def:note"/>
    <style id="base-n-integer" _name="Base-N Integer" map-to="def:base-n-integer"/>
    <style id="floating-point" _name="Floating Point number" map-to="def:floating-point"/>
    <style id="decimal" _name="Decimal number" map-to="def:decimal"/>
    <style id="string" _name="String" map-to="def:string"/>
    <style id="keyword" _name="Keyword" map-to="def:keyword"/>
    <style id="meta-keyword" _name="Type, module or object keyword" map-to="def:keyword"/>
    <style id="fun-keyword" _name="Builtin-function keyword" map-to="def:keyword"/>
    <style id="type" _name="Data Type" map-to="def:type"/>
    <style id="escape" _name="Escaped Character" map-to="def:special-char"/>
    <style id="boolean" _name="Boolean value" map-to="def:boolean"/>
    <style id="error" _name="Error" map-to="def:error"/>
    <style id="std-modules" _name="Standard Modules" map-to="def:type"/>
  </styles>

  <definitions>
    <define-regex id="char-esc">\\((\\|"|'|n|t|b|r)|[0-9]{3}|x[0-9a-fA-F]{2})</define-regex>

    <context id="escape-seq" style-ref="escape">
      <match>\%{char-esc}</match>
    </context>

    <!-- here's the main context -->
    <context id="andromeda" class="no-spell-check">
      <include>
	<context id="ocamldoc" style-ref="ocamldoc">
	  <start>\(\*\*(?!\))</start>
	  <end>\*\)</end>
	  <include>
	    <context id="comment-in-comment" style-ref="comment" class="comment" class-disabled="no-spell-check">
	      <start>\(\*</start>
	      <end>\*\)</end>
	      <include>
		<context ref="string"/>
		<context ref="comment-in-comment"/>
		<context ref="def:in-comment:*"/>
	      </include>
	    </context>
	    <context ref="string"/>
	    <context ref="def:in-comment:*"/>
	  </include>
	</context>
	<context id="comment" style-ref="comment" class="comment" class-disabled="no-spell-check">
	  <start>\(\*</start>
	  <end>\*\)</end>
	  <include>
	    <context ref="string"/>
	    <context ref="comment-in-comment"/>
	    <context ref="def:in-comment:*"/>
	  </include>
	</context>
	<context id="decimal" style-ref="decimal">
	  <match>[-]?[0-9][0-9]*</match>
	</context>
	<context id="string" style-ref="string">
	  <start>"</start>
	  <end>"</end>
	  <include>
	    <context ref="escape-seq"/>
	  </include>
	</context>
	<context id="character-constant" style-ref="string">
	  <match>('\%{char-esc}')|('[^\\']')</match>
	</context>
	<context id="boolean-constant" style-ref="boolean">
	  <keyword>true</keyword>
	  <keyword>false</keyword>
	</context>
	<context id="keywords" style-ref="keyword">
    <keyword>Type</keyword>
    <keyword>Judgement</keyword>
    <keyword>Judgment</keyword>
    <keyword>_atom</keyword>
    <keyword>_constant</keyword>
    <keyword>and</keyword>
    <keyword>as</keyword>
    <keyword>assume</keyword>
    <keyword>congruence</keyword>
    <keyword>constant</keyword>
    <keyword>context</keyword>
    <keyword>current</keyword>
    <keyword>do</keyword>
    <keyword>dynamic</keyword>
    <keyword>end</keyword>
    <keyword>extensionality</keyword>
    <keyword>external</keyword>
    <keyword>fail</keyword>
    <keyword>finally</keyword>
    <keyword>forall</keyword>
    <keyword>fun</keyword>
    <keyword>handle</keyword>
    <keyword>handler</keyword>
    <keyword>hypotheses</keyword>
    <keyword>ident</keyword>
    <keyword>in</keyword>
    <keyword>lambda</keyword>
    <keyword>let</keyword>
    <keyword>match</keyword>
    <keyword>mltype</keyword>
    <keyword>now</keyword>
    <keyword>occurs</keyword>
    <keyword>of</keyword>
    <keyword>operation</keyword>
    <keyword>rec</keyword>
    <keyword>reduction</keyword>
    <keyword>ref</keyword>
    <keyword>refl</keyword>
    <keyword>val</keyword>
    <keyword>verbosity</keyword>
    <keyword>where</keyword>
    <keyword>with</keyword>
    <keyword>yield</keyword>
  </context>
	<context id="types" style-ref="type">
	  <keyword>Type</keyword>
	</context>
      </include>
    </context>
  </definitions>
</language>
