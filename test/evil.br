assume D : Type

assume scott : D == D -> D @ Type

define fix :=
  fun (f : D -> D) =>
  handle 
    (fun (x : D) => f (x x)) (fun (x : D) => f (x x))
  with scott end

define fix_works :=
  fun (f : D -> D) =>
    (Refl (fix f) :> f (fix f) == fix f @ D)

define horrible := handle fix fix with scott end

#context