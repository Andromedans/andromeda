assume nat : Type
assume O : nat 

assume S : nat -> nat


define d0 := handle [ ? :: nat ] with [?::nat] => O end


define d1 := fun w : nat =>
              handle [?::nat] with [?::nat] => S w end

// After desugaring the two [?::nat]'s are not syntactically identical
//   [because the w binder increments the index for nat inside the function]
// but the code now compensates for this difference.
define d2 :=  handle fun w : nat => [? :: nat]
               with [?::nat] => O end

// d3 correctly fails to type check. The handler scoping is dynamic, but
//   the bodies are statically scoped (thanks mostly to Desugar/de Bruijn)

// define d3 :=  handle fun w : t => [? :: t]
//              with [?::t] => w end


define d4 := handle [ ? :: nat -> nat ] 
             with [? :: nat -> nat] => fun n => O end


// Works because handler scope is different than in Eff

define d5 := handle 
                handle [ ? :: nat -> nat ] 
                with [? :: nat] => O
                end
             with [? :: nat -> nat] => fun n => [?::nat] 
             end


define d6 :=  handle fun w : nat => S ?!
               with [?::nat] => O end

define p1 := (O, S(O))

define n2 := p1.fst


assume List : nat -> Type
assume l3 : List (S(S(S(O))))
assume length : (n : nat) -> List n -> nat


assume p2 : (n : nat) * (List n)

define ln := p2.snd

define p3 := (S(S(S(O))), l3)

define p4 := ( (S(S(S(O))), l3) :> (n:nat) * List(n) )


///////////////
// Equivalence Types
///////////////

assume plus : nat -> nat -> nat
assume oneonetwo : plus (S O) (S O) == S(S(O)) @ nat
assume sym : (x:nat) -> (y:nat) -> (x == y @ nat) -> (y == x @ nat)

define twooneone := sym (plus (S O) (S O)) (S(S(O))) oneonetwo


/////////////////
// Path Induction (propositional)
/////////////////

define path_symmetry :=
  fun (A : Type) (a b : A) (q : a=b @ A) =>
         Ind(q, x.y.p.(y = x @ A), z.idpath z)


// An asymmetric definition of transitivity

define path_transitivity :=
  fun (A : Type) (a b c : A) (q_ab : a = b @ A) (q_bc : b = c @ A) =>
       Ind(q_ab, x. y. p. (d : A) -> (q : y = d @ A ) -> (x = d @ A),
            z. fun (d : A) (q : z = d @ A) => q)
           c q_bc

#context

