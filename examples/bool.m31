(** The definition of booleans. *)

Parameter bool : Type.
Parameter true : bool.
Parameter false : bool.

Parameter ind_bool :
  forall (P : bool -> Type) (x : P true) (y : P false), forall b : bool, P b.

Parameter ind_bool_true :
  forall (P : bool -> Type) (x : P true) (y : P false), ind_bool P x y true == x.

Parameter ind_bool_false :
  forall (P : bool -> Type) (x : P true) (y : P false), ind_bool P x y false == y.

(* We prove that "if b then true else false" equals "b". *)
Check
 beta ind_bool_true in
 beta ind_bool_false in
 (ind_bool
   (fun b => ind_bool (fun _ => bool) true false b == b)
  (refl true)
   (refl false))
 : forall b : bool, ind_bool (fun _ => bool) true false b == b.

(* Next we show that true and false are not equal. *)

 #include "empty.m31" "unit.m31"

(* Be very careful about when reductions may happen.
   Better hint management would help here. *)

Let bool_disjoint :=
  (fun p =>
     let P :=
         fun (b : bool) => ind_bool (fun _ => Type) unit empty b
     in
     let p :=
       beta p in
         (refl (P true) : P true == P false) in
     let p :=
       beta ind_bool_false in
         p : P true == empty in
     let p :=
       beta ind_bool_true in
         p : unit == empty in
     beta p in
       tt : empty)
    :
    true == false -> empty.

(* Let's be less careful. *)
Beta ind_bool_true.
Beta ind_bool_false.

Let bool_disjoint' :=
  (fun (p : true == false) =>
     let P := fun (b : bool) => ind_bool (fun (_ : bool) => Type) unit empty b in
     let p :=
       beta p in
         (refl (P true) : P true == P false) in
     let p := p : unit == empty in
     beta p in
       tt : empty)
    :
    true == false -> empty.

(* The information propagates inwards. *)
Let bool_disjoint'' :=
  (fun (p : true == false) =>
     let P := fun (b : bool) => ind_bool (fun (_ : bool) => Type) unit empty b in
     let p := beta p in (refl empty : P true == empty) in
     let p := p : unit == empty in
     beta p in tt)
    :
    true == false -> empty.

Check bool_disjoint''.
