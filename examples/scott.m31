(* Untyped λ-calculus *)

(* We assume that there is a type [D] equal to its function space. *)
Parameter D : Type.
Parameter scott : (D → D) ≡ D.
Let dana : D ≡ (D → D) := symmetry Type (D → D) D scott.
Hint dana; scott.


(* The Y combinator *)
Let Y : (D → D) → D :=
  λ [f : D → D]
    (λ [x : D] f ((x :: D → D) x))
    (λ [x : D] f ((x :: D → D) x)).

(* The Y combinator indeed computes fixed points. *)
(* This does not require any special tricks because [Y f] has a whnf. *)
Check (λ [f] refl (Y f)) :: Π [f : D → D] Y f ≡ f (Y f).


(* Here is a trick to prevent a term without weak head normal form from cycling. *)
(* We define Ω = (λx.xx) (λx.xx) so that it does not beta-reduce. The idea is
   to use an alias [D'] for [D]. We then make sure that the λ-abstractions
   happen at [D], but the application at [D']. *)

Parameter D' : Type.
Parameter h : D' ≡ D.
Let scott' := hint h in scott :: (D' → D') ≡ D'.
Hint scott'.

(* The λ-abstraction happens at type [D] *)
Let δ : D → D := λ [x] (x :: D → D) x.

(* But we make sure that the application δ δ happens at [D']. *)
Let Ω :=
    hint h in
      (δ :: D' → D')
      ((δ :: D' → D') :: D').

(* Notice that [Ω] does not diverge even though a beta-reduction happens. *)
Check refl Ω :: (λ [x : D'] x) Ω ≡ Ω.
