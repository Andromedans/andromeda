(* Untyped λ-calculus *)

(* We assume that there is a type [D] equal to its function space. *)
constant D : Type
constant scott : (D → D) ≡ D
let dana : D ≡ (D → D) = sym Type (D → D) D scott
now hints = add_hints [dana, scott] hints


(* The Y combinator *)
let Y : (D → D) → D =
  λ f : D → D,
    let y = λ x : D, f ((x : D → D) x) in
    y y

(* The Y combinator indeed computes fixed points. *)
(* This does not require any special tricks because [Y f] has a whnf. *)
do (λ f, refl (Y f)) : Π f : D → D, Y f ≡ f (Y f)


(* Here is a trick to prevent a term without weak head normal form from cycling. *)
(* We define Ω = (λx.xx) (λx.xx) so that it does not beta-reduce. The idea is
   to use an alias [D'] for [D]. We then make sure that the λ-abstractions
   happen at [D], but the application at [D']. *)

constant D' : Type
constant h : D' ≡ D
let scott' =
  now hints = add_hint h hints in
  scott : (D' → D') ≡ D'

now hints = add_hint scott' hints

(* The λ-abstraction happens at type [D] *)
let δ : D → D = λ x, (x : D → D) x

(* But we make sure that the application δ δ happens at [D']. *)
let Ω =
    now hints = add_hint h hints in
    let δ' = δ : D' → D' in
    now betas = add_betas [h,scott'] betas in
      δ' (δ' : D')

(* Notice that [Ω] does not diverge even though a beta-reduction happens. *)
do refl Ω : (λ x : D', x) Ω ≡ Ω

