(* Untyped λ-calculus *)

(* We assume that there is a type [D] equal to its function space. *)
constant D : Type
constant D_reflexive : D ≡ (D → D)
now hints = add_hints [D_reflexive, symmetry D_reflexive]

(* The fixpoint combinator *)
let fix =
  (λ f,
    let y = (λ x : D, f ((x : D → D) x)) in
    y y)
  : (D → D) → D

(* The fix combinator indeed computes fixed points. *)
(* This does not require any special tricks because [fix f] has a whnf. *)
let fix_eq =
 (λ f, refl (fix f)) : 
 Π (f : D → D), fix f ≡ f (fix f)


(* Here is a trick to prevent a term without weak head normal form from cycling. *)
(* We define Ω = (λx.xx) (λx.xx) so that it does not beta-reduce. The idea is
   to use an alias [D'] for [D]. We then make sure that the λ-abstractions
   happen at [D], but the application at [D']. *)

constant D' : Type
constant D'_eq_D : D' ≡ D

(* The λ-abstraction happens at type [D] *)
let δ = (λ x : D, (x : D → D) x)

(* But we make sure that the application δ δ happens at [D']. *)
let Ω =
  now hints = add_hints [D'_eq_D, symmetry D'_eq_D] in
  (δ : D' → D') (δ : D)

do whnf Ω

(* Notice that [Ω] does not diverge even though a beta-reduction happens. *)
do refl Ω : (λ x : D', x) Ω ≡ Ω

(* do refl (δ δ) : (λ x : D, x) (δ δ) ≡ (δ δ) *)
