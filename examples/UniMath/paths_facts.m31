(* Prove that the axiomatisation of the inductive definition of paths inherits
   UIP from the reflective equality of andromeda. *)

require "paths.m31".

Let eq_of_paths :=
  λ [A : Type] [a y : A] [p : paths A a y]
    paths_rect
      A a
      (λ [x : A] [_ : paths A a x] a == x)
      (refl a :: a == a)
      y
      p
    :: a == y.

Let paths_of_eq :=
  λ [A : Type] [a b : A] [p : a == b]
    beta p in paths_refl A a :: paths A a b.

Let paths_eq_inv :=
  λ [A : Type] [a b : A] [p : paths A a b]
    paths_rect
      A a
      (λ [y : A] [p : paths A a y]
         p == paths_of_eq A a y (eq_of_paths A a y p))
      (refl (paths_refl A a))
      b
      p
    :: p == paths_of_eq A a b (eq_of_paths A a b p).

Let eq_paths_inv :=
  λ [A : Type] [a b : A] [h : a == b]
    (refl h)
    :: eq_of_paths A a b (paths_of_eq A a b h) == h.

(* This is an attempt to define the computation rule of paths faithfully to pattern-matching *)
(* XXX we can't ever match [p], so this can't be used as beta rule -- what's the right formulation? *)
Parameter paths_iota' :
  forall [A : Type] [a : A]
         [P : forall [a0 : A] [_ : paths A a a0] Type]
         [t : P a (paths_refl A a)] [y : A] [p : paths A a y]
    let h := (eq_of_paths A a y p :: a == y) in
    beta h in
        paths_rect A a P t y ((paths_refl A a) :: paths A a y) == t.

