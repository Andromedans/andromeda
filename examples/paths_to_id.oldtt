// On nat propositional equality implies judgmental equality

assume false : Type
define not := fun (P : QuasiType) => P -> false
assume ex_falso : false -> (T : QuasiType) -> T

assume nat : Type
assume 0 : nat
assume S : nat -> nat

assume nat_nonzero_succ : (n : nat) -> (0 = S(n) @ nat) -> false
assume nat_nonzero_succ2 : (n : nat) -> (S(n) = 0 @ nat) -> false
assume nat_injection : (n : nat) -> (m: nat) -> (S(n) = S(m) @ nat) -> (n = m @ nat)
assume nat_ind : (P : nat -> QuasiType) -> (P 0) -> ((n : nat) -> P(n) -> P(S(n))) -> (n:nat) -> P(n)

assume OR    : (P : QuasiType) -> (Q : QuasiType) -> QuasiType
assume inj1  : (P : QuasiType) -> (Q : QuasiType) -> P -> OR P Q
assume inj2  : (P : QuasiType) -> (Q : QuasiType) -> Q -> OR P Q
assume cases : (P : QuasiType) -> (Q : QuasiType) -> (R : QuasiType) -> (P -> R) -> (Q -> R) -> (OR P Q -> R)

assume lemma : (n : nat) -> (S n = n @ nat) -> false

// Main proof

define P := fun (x:nat) (y:nat) => OR (x == y @ nat) (not (x = y @ nat))

define nat_dec  :  ((x : nat) -> (y : nat) -> P x y)
  :=   nat_ind (fun x => forall y : nat, OR (x == y @ nat) (not (x = y @ nat)))
               (fun y => nat_ind (P 0)
                                 (inj1 ? ? (refl 0))                         // P 0 0
                                 (fun y _ => inj2 ? ? (nat_nonzero_succ y))  // (y:nat) -> P 0 y -> P 0 (S y)
                                 y)
               (fun x (IH1 : forall y:nat, P x y) =>
                   nat_ind (P (S x))
                           (inj2 ? ? (nat_nonzero_succ2 x))              // P (S x) 0
                           (fun y _ =>                                   // (y:nat) -> P (S x) y -> P (S x) P (S y)
                              (cases ? ? (P (S x) (S y))
                                 (fun wit_equiv : (x == y @ nat) =>
                                    handle
                                       inj1 ? ? (refl (S x))
                                    with 
                                       wit_equiv
                                    end)
                                 (fun wit_ne : (not (x = y @ nat)) => 
                                    inj2 ? ? (fun (w : S x = S y @ nat) => wit_ne (nat_injection x y w)))
                                 (IH1 y))))

    
define paths_to_id : (x : nat) -> (y : nat) -> (x = y @ nat) -> (x == y @ nat) :=
     (fun x => fun y => fun H =>
        cases ? ? ?
          (fun (wit_equiv : x == y @ nat) => wit_equiv)
          (fun (wit_ne : not (x = y @ nat)) => ex_falso (wit_ne H) ?)
          (nat_dec x y))
