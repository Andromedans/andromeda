#include_once "../std/new_equal.m31"

constant A : Type
constant a : A
constant f g h : A -> A
constant g_def : g == (lambda x : A, f (f x))
constant h_def : h == g

let imps = [(g, ([], g, ref (Some g_def))), (h, ([], h, ref (Some h_def)))]

do whnf_term imps (h (g (h a)))

(* Trying to solve an equation *)
let id = lambda (A : Type) (x : A), x

do assume U : Type in
     let imps = mk_imp U :: imps in
     handle
       whnf_term imps (id U (id U a))
     with
       coerce (|- _ : ?B) ?C =>
         match equal_ty imps B C with
         | Some ?xi => yield (Convertible xi)
         | None => yield NotCoercible
         end
     end

(* Does it work with several levels of definitions? *)

constant T : Type -> Type

constant cow : forall A B : Type, A -> B -> Type


fail
   assume X : Type in
   assume Y : Type in
   assume Z : Type in
   assume W : Type in
   let imps = list_map mk_imp [X,Y,Z,W] in
   handle
     let a = lambda y : Y, (y : T X) in
     let b = lambda x : X, (x : T Y) in
     cow Z W a b
   with
     coerce (|- _ : ?B) ?C =>
       match equal_ty imps B C with
       | Some ?xi => yield (Convertible xi)
       | None => yield NotCoercible
       end
   end

do
  with implicits handle
    resolve (id ? a)

do
  with implicits handle
    (id (id ? ?) a)

(* Here we need to be careful about order of resolution,
   but it is taken care of by the handler. *)
do
  with implicits handle
    resolve (id (id ? ?) a)

do
  with implicits handle
  assume x : ? in x


do
  with implicits handle
    assume s : ? in
    assume t : ? in
    let _ = s == t in
    (s, resolve t)

do
  assume X : Type in
  assume x : X in
  let imps = [mk_imp X] in
  handle
    x == x
   with
     coerce (|- _ : ?B) ?C =>
       match equal_ty imps B C with
       | Some ?xi => yield (Convertible xi)
       | None => yield NotCoercible
       end
   end
   

do
  with implicits handle
    resolve (refl a : ?)

fail
  with implicits handle
    λ (B : Type) (b : B), id ? b

fail
  with implicits handle
  assume f : ∏ (x : A), (∏ (y : A), x ≡ y) → A in
    f ? (λ y, refl y)
