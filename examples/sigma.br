Definition Type := Universe f0.

Parameter sigma : forall (A : Type), (A -> Type) -> Type.

Parameter pair :
  forall (A : Type)
         (P : A -> Type)
         (a : A)
         (b : P a),
         sigma A P.

Parameter sigma_elim :
  forall (A : Type)
         (P : A -> Type)
         (u : sigma A P)
         (C : sigma A P -> Type),
         (forall (a : A) (b : P a), C (pair A P a b)) -> C u.

Parameter sigma_beta :
  forall (A : Type)
         (P : A -> Type)
         (a : A)
         (b : P a)
         (C : sigma A P -> Type)
         (f : forall (a : A) (b : P a), C (pair A P a b)),
         sigma_elim A P (pair A P a b) C f == f a b.

Parameter sigma_comm :
    forall (A : Type)
           (P : A -> Type)
         (Q : sigma A P -> Type)
         (q : forall (x : A) (p : P x), Q (pair A P x p))
         (R : forall (x : sigma A P), Q x -> Type)
         (f : forall (x : sigma A P) (q : Q x), R x q)
           (u : sigma A P),
  rewrite sigma_beta in
    sigma_elim A P u
               (fun (x : sigma A P) => R x (sigma_elim A P x Q (fun (x : A) (p : P x) => q x p)))
               (fun (x : A) (p : P x) => f (pair A P x p) (q x p) :: R (pair A P x p) (sigma_elim A P (pair A P x p) Q q))
      ==
    f u (sigma_elim A P u Q q).

Definition sigma_half_eta :=
  fun (A : Type)
      (P : A -> Type)
      (u : sigma A P) =>
    sigma_comm A P (fun (_ : sigma A P) => sigma A P) (pair A P) (fun (_ : sigma A P) (_ : sigma A P) => sigma A P) (fun (x : sigma A P) (_ : sigma A P) => x) u
    :: sigma_elim A P u (fun (_ : sigma A P) => sigma A P)
         (fun (a : A) (b : P a) => pair A P a b)
       ==
       u.

Rewrite sigma_beta.

Definition fst :=
  fun (A : Type) (P : A -> Type) (u : sigma A P) =>
    sigma_elim A P u (fun (_ : sigma  A P) => A) (fun (a : A) (_ : P a) => a).

Definition snd :=
  fun (A : Type) (P : A -> Type) (u : sigma A P) =>
    sigma_elim
      A P u
      (fun (u : sigma A P) => P (fst A P u))
      (fun (a : A) (b : P a) => b).

Parameter X : Type.
Parameter Q : X -> Type.
Parameter x : X.
Parameter y : Q x.

Definition check_fst :=
  refl x :: x == fst X Q (pair X Q x y).

Definition check_snd :=
  refl y :: y == snd X Q (pair X Q x y).

Parameter R : sigma X Q -> Type.
Parameter z : R (pair X Q x y).

Definition check_fst_fst :=
  refl x ::
    fst X Q
      (fst (sigma X Q) R
        (pair (sigma X Q) R (pair X Q x y) z)
      )
     == x.

Definition check_snd_fst :=
  refl y ::
    snd X Q
      (fst (sigma X Q) R
        (pair (sigma X Q) R (pair X Q x y) z)
      )
     == y.

Definition check_snd_snd :=
  refl z ::
     snd (sigma X Q) R
        (pair (sigma X Q) R (pair X Q x y) z)
     == z.

Definition sigma_eta' :=
  fun
    (A : Type)
    (P : A -> Type)
    (u v : sigma A P)
    (e1 : fst A P u == fst A P v) =>
    equation e1 in
      fun (e2 : snd A P u == snd A P v) =>
      equation sigma_half_eta A P u in
      equation sigma_half_eta A P v in
      ((refl u
        :: sigma_elim A P u (fun (_ : sigma A P) => sigma A P)
                     (fun (a : A) (b : P a) => pair A P a b)
           == sigma_elim A P u (fun (_ : sigma A P) => sigma A P)
                         (fun (a : A) (b : P a) => pair A P a b))
        :: u == v).

Definition sigma_eta_pair :=
  fun (A : Type)
      (P : A -> Type)
      (u : sigma A P)
  =>
    sigma_eta' A P u (pair A P (fst A P u) (snd A P u))
      (refl (fst A P u))
      (refl (snd A P u)).

#context
