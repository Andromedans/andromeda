constant A : Type
constant B : Type
constant C : Type
constant f : A -> C
constant eq : A ≡ B

do add_beta eq

let hippy =
  handler
  equal ?a ?b =>
      match equal a b with
      | None => assume ξ : a ≡ b in yield (Some ξ)
      | Some ?ζ => yield (Some ζ)
      end
  end

do with hippy handle
     (λ (x : B), f (f x))