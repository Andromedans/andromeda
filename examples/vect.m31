#include_once "peano.m31" "unit.m31" "finite.m31"

constant vect : forall (A : Type), N -> Type
constant vnil : forall (A : Type), vect A Z
constant vcons : forall (A : Type) (n : N), A -> vect A n -> vect A (S n)

constant vect_ind :
  forall (A : Type)
         (P : forall (n : N) (_ : vect A n), Type)
         (_ : P Z (vnil A))
         (_ : forall (n : N) (a : A) (v : vect A n) (_ : P n v),
             P (S n) (vcons A n a v))
         (n : N)
         (v : vect A n),
    P n v

constant vect_ind_beta_vnil :
  forall (A : Type)
         (P : forall (n : N) (_ : vect A n), Type)
         (z : P Z (vnil A))
         (f : forall (n : N) (a : A) (v : vect A n) (_ : P n v),
             P (S n) (vcons A n a v)),
         vect_ind A P z f Z (vnil A) == z

constant vect_ind_beta_vcons :
  forall (A : Type)
         (P : forall (n : N) (_ : vect A n), Type)
         (z : P Z (vnil A))
         (f : forall (n : N) (a : A) (v : vect A n) (_ : P n v),
             P (S n) (vcons A n a v))
         (n : N)
         (a : A)
         (t : vect A n),
    vect_ind A P z f (S n) (vcons A n a t) ==
    f n a t (vect_ind A P z f n t)


let _ = add_betas [ind_N_Z,ind_N_S]

let vhead =
  λ (A : Type) (n : N) (v : vect A (S n)),
    let P =
        (λ (index : N) (v : vect A index),
           ind_N
             (λ (_ : N), Type)
             unit
             (λ (n : N) (_ : Type), A)
             index) in
    vect_ind
      A P {}
      (λ (n : N) (a : A) (t : vect A n) (_ : P n t), a)
      (S n) v

let vtail =
  λ (A : Type) (n : N) (v : vect A (S n)),
    let P =
        (λ (index : N) (v : vect A index),
           ind_N
             (λ (_ : N), Type)
             unit
             (λ (n : N) (_ : Type), vect A n)
             index) in
    vect_ind
      A P {}
      (λ (n : N) (a : A) (t : vect A n) (_ : P n t), t)
      (S n) v


let vget = with fasteq tt handle
  beta Finite_rect_fzero;
  beta Finite_rect_fsucc;
  (λ (A : Type) (n : nat) (i : Finite n) (v : vect A n),
     Finite_rect
       (λ (n0 : nat) (_ : Finite n0), forall (_ : vect A n0), A)
       (λ (n0 : nat)
            (v0 : vect A (S n0)),
          vhead A n0 v0)
       (λ (n0 : nat) (_ : Finite n0) (IHi : forall (_ : vect A n0), A)
            (v0 : vect A (S n0)), IHi (vtail A n0 v0)) n i v)
  : forall (A : Type) (n : nat) (_ : Finite n) (_ : vect A n), A


let v2 = (vcons N Z two (vnil N))
let v52 = (vcons N one five v2)

do with fasteq tt handle
  beta vect_ind_beta_vnil;
  beta vect_ind_beta_vcons;
  refl five :
  vhead N one v52 == five

do with fasteq tt handle
  beta vect_ind_beta_vnil;
  beta vect_ind_beta_vcons;
  refl v2 :
  vtail N one v52 == v2

let _ = add_betas [Finite_rect_fzero,Finite_rect_fsucc,vect_ind_beta_vnil,vect_ind_beta_vcons]

do refl two : ((vget nat one (fzero Z) v2) == two)

(* TODO
do
   refl five : 
     ((vget nat two
            (fsucc one (fzero Z))
            (vcons nat one five
                   (vcons nat Z three
                          (vnil nat)))) == five)
*)

