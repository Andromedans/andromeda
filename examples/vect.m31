#include "peano.m31" "unit.m31" "finite.m31"

Parameter vect : forall (A : Type), N -> Type.
Parameter vnil : forall (A : Type), vect A Z.
Parameter vcons : forall (A : Type) (n : N), A -> vect A n -> vect A (S n).

Parameter vect_ind :
  forall (A : Type)
         (P : forall (n : N) (_ : vect A n), Type)
         (_ : P Z (vnil A))
         (_ : forall (n : N) (a : A) (v : vect A n) (_ : P n v),
             P (S n) (vcons A n a v))
         (n : N)
         (v : vect A n),
    P n v.

Parameter vect_ind_beta_vnil :
  forall (A : Type)
         (P : forall (n : N) (_ : vect A n), Type)
         (z : P Z (vnil A))
         (f : forall (n : N) (a : A) (v : vect A n) (_ : P n v),
             P (S n) (vcons A n a v)),
         vect_ind A P z f Z (vnil A) == z.

Parameter vect_ind_beta_vcons :
  forall (A : Type)
         (P : forall (n : N) (_ : vect A n), Type)
         (z : P Z (vnil A))
         (f : forall (n : N) (a : A) (v : vect A n) (_ : P n v),
             P (S n) (vcons A n a v))
         (n : N)
         (a : A)
         (t : vect A n),
    vect_ind A P z f (S n) (vcons A n a t) ==
    f n a t (vect_ind A P z f n t).


Let vhead :=
  beta ind_N_Z in
  beta ind_N_S in
  fun (A : Type) (n : N) (v : vect A (S n)) =>
    let P :=
        (fun (index : N) (v : vect A index) =>
           ind_N
             (fun (_ : N) => Type)
             unit
             (fun (n : N) (_ : Type) => A)
             index) in
    vect_ind
      A P tt
      (fun (n : N) (a : A) (t : vect A n) (_ : P n t) => a)
      (S n) v.

Let vtail :=
  beta ind_N_Z in
  beta ind_N_S in
  fun (A : Type) (n : N) (v : vect A (S n)) =>
    let P :=
        (fun (index : N) (v : vect A index) =>
           ind_N
             (fun (_ : N) => Type)
             unit
             (fun (n : N) (_ : Type) => vect A n)
             index) in
    vect_ind
      A P tt
      (fun (n : N) (a : A) (t : vect A n) (_ : P n t) => t)
      (S n) v.


Let vget :=
  beta ind_N_Z in
  beta ind_N_S in
  beta Finite_rect_fzero in
  beta Finite_rect_fsucc in
  (fun (A : Type) (n : nat) (i : Finite n) (v : vect A n) =>
     Finite_rect
       (fun (n0 : nat) (_ : Finite n0) => forall _ : vect A n0, A)
       (fun (n0 : nat)
            (v0 : vect A (S n0)) =>
          vhead A n0 v0)
       (fun (n0 : nat) (_ : Finite n0) (IHi : forall _ : vect A n0, A)
            (v0 : vect A (S n0)) => IHi (vtail A n0 v0)) n i v)
  : forall (A : Type) (n : nat) (_ : Finite n) (_ : vect A n), A.


Let v2 := (vcons N Z two (vnil N)).
Let v52 := (vcons N one five v2).

Check
  beta ind_N_Z in
  beta ind_N_S in
  beta vect_ind_beta_vnil in
  beta vect_ind_beta_vcons in
  refl five :
  vhead N one v52 == five.

Check
  beta ind_N_Z in
  beta ind_N_S in
  beta vect_ind_beta_vnil in
  beta vect_ind_beta_vcons in
  refl v2 :
  vtail N one v52 == v2.


Beta ind_N_Z.
Beta ind_N_S.
Beta Finite_rect_fzero.
Beta Finite_rect_fsucc.
Beta vect_ind_beta_vnil.
Beta vect_ind_beta_vcons.

(* Verbosity 1. *)
(** XXX this should work  *)
(* Check refl two : ((vget nat one (fzero Z) v2) == two). *)


(* Check *)
(*   beta ind_N_Z in *)
(*   beta ind_N_S in *)
(*   beta Finite_rect_fzero in *)
(*   beta Finite_rect_fsucc in *)
(*   beta vect_ind_beta_vnil in *)
(*   beta vect_ind_beta_vcons in *)
(*   refl five : *)
(*     ((vget nat two *)
(*            (fsucc one (fzero Z)) *)
(*            (vcons nat one five *)
(*                   (vcons nat Z three *)
(*                          (vnil nat)))) == five). *)
