define Set := `Universe f0`

define sym /* : forall (A : Set) (a b : A), a == b -> b == a */ :=
  let Set_t = t`Set`  in
  lambda A : Set_t,
    lambda a : t`A`,
    lambda b : t`A`,
    lambda p : t`a == b`,
    with
      handler op equiv [a1,a2,u] k => k `p` end
    handle
      `refl a` :> t`b == a`

/*
define G :
  forall
    (A : Set)
    (P : forall (x y : A), x == y -> Set),
    (forall x : A, P x x (refl x)) ->
    (forall (x y : A) (p : x == y), P x y p)
  := 
  fun (A : Set)
      (P : forall (x y : A), x == y -> Set)
      (r : forall a : A, P a a (refl a))
      (x y : A) (p : x == y)
  =>
    equation p in (r x :: P x y p)

*/

#context

