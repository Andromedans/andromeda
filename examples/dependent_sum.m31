(* Dependent sums *)
constant Σ : Π (A : Type) (B : A → Type), Type
constant existT : Π (A : Type) (B : A → Type) (a : A), B a → Σ A B

constant π₁ : Π (A : Type) (B : A → Type), Σ A B → A
now reducing = add_reducing π₁ [lazy, lazy, eager]

constant π₂ : Π (A : Type) (B : A → Type) (p : Σ A B), B (π₁ A B p)
now reducing = add_reducing π₂ [lazy, lazy, eager]

constant π₁_β :
  Π (A : Type) (B : A → Type) (a : A) (b : B a),
    (π₁ A B (existT A B a b) == a)

now betas = add_beta π₁_β

constant π₂_β :
  Π (A : Type) (B : A → Type) (a : A) (b : B a),
    (π₂ A B (existT A B a b) == b)

now betas = add_beta π₂_β

constant Σ_η : Π (A : Type) (B : A → Type) (p q : Σ A B)
                 (ξ : π₁ A B p ≡ π₁ A B q),
                 now hints = add_hint (symmetry ξ) in
                   π₂ A B p ≡ π₂ A B q → p ≡ q

now etas = add_eta Σ_η

(* Simple products as a dependent sum *)
constant ( * ) : Type → Type → Type
constant prod_def : ∏ (A B : Type), A * B ≡ Σ A (λ _, B)
now betas = add_beta prod_def

constant pair : ∏ (A B : Type), A → B → A * B
constant pair_def : ∏ (A B : Type) (x : A) (y : B), pair A B x y ≡ existT A (λ _, B) x y
now betas = add_beta pair_def

(* Identity function *)
constant id : ∏ (A : Type), A → A
constant id_def : id ≡ (λ (A : Type) (x : A), x)
now betas = add_beta id_def

(* Composition of functions *)
constant compose : ∏ (A B C : Type), (B → C) → (A → B) → (A → C)
constant compose_def : 
  ∏ (A B C : Type) (g : B → C) (f : A → B) (x : A), compose A B C g f x ≡ g (f x)
now betas = add_beta compose_def

(* Here we should probably normalize the types of g and f before
   matching them. We should also check that C does not depend on x. *)
let compose' g f =
  match g with
  | ⊢ _ : ∏ (?x : ?B), ?C =>
    match f with
    | ⊢ _ : ∏ (?y : ?A), _ =>
      compose A B C g f
    end
  end

(* Isomorphic types *)

constant is_inverse :
  ∏ (A B : Type) (f : A → B) (g : B → A), Type
constant is_inverse_def :
  ∏ (A B : Type) (f : A → B) (g : B → A),
    is_inverse A B f g ≡ (compose' f g ≡ id B) * (compose' g f ≡ id A)
now betas = add_beta is_inverse_def

constant iso : Type → Type → Type
constant iso_def :
 ∏ (A B : Type),
   iso A B ≡ Σ (A → B) (λ f, Σ (B → A) (λ g, is_inverse A B f g))
now betas = add_beta iso_def

(* The identity is an isomorphism *)
constant id_iso : ∏ (A : Type), is_inverse A A (id A) (id A)
constant id_iso_proof:
  resolve
    (id_iso ≡ (λ _, pair ? ? (refl ?) (refl ?)))

(* Isomorphism is symmetric *)
constant iso_sym : ∏ (A B : Type), iso A B → iso B A

constant iso_sym_proof:
  resolve
    (iso_sym ≡
     (λ A B φ, 
        let f = π₁ ? ? φ
        and g = π₁ ? ? (π₂ ? ? φ) in
        existT ? (λ g', Σ ? (λ f', is_inverse B A g' f'))
                 g
                 (existT ? (λ f', is_inverse B A g f')
                    f
                    (pair ? ?
                       (π₂ ? ? (π₂ ? ? (π₂ ? ? φ)))
                       (π₁ ? ? (π₂ ? ? (π₂ ? ? φ))))))
    )

do iso_sym_proof

