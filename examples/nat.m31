(** Natural numbers *)

constant nat : Type

constant O : nat

constant S : nat -> nat

now reducing = add_reducing S [eager]

constant nat_rect : Π (P : nat -> Type) (s0 : P O) (s : Π (n : nat), P n -> P (S n)) (m : nat), P m

now reducing = add_reducing nat_rect [lazy, lazy, lazy, eager]

constant nat_iota_O :
  Π (P : nat -> Type) (s0 : P O) (s : Π (n : nat), P n -> P (S n)),
  nat_rect P s0 s O == s0

constant nat_iota_S :
  Π (P : nat -> Type) (s0 : P O) (s : Π (n : nat), P n -> P (S n)) (m : nat),
  nat_rect P s0 s (S m) == s m (nat_rect P s0 s m)

now betas = add_betas [nat_iota_O, nat_iota_S]

constant ( + ) : nat -> nat -> nat
constant plus_def : ∀ (n m : nat),
                      n + m == nat_rect (λ _, nat) n (λ _ x, S x) m

let plus_O = now betas = add_beta plus_def in
  resolve ((lambda n, refl ?) : forall n : nat, n + O == n)

let plus_S = now betas = add_beta plus_def in
  resolve ((lambda n m, refl ?) : forall n m : nat, n + (S m) == S (n + m))

now reducing = add_reducing ( + ) [eager, eager]
now betas = add_betas [plus_O, plus_S]


constant ( * ) : nat -> nat -> nat
constant mult_def : forall n m : nat, n * m == nat_rect (lambda _, nat) O (lambda _ x, x + n) m

let mult_O = now betas = add_beta mult_def in
  resolve ((lambda n, refl ?) : forall n : nat, n * O == O)

let mult_S = now betas = add_beta mult_def in
  resolve ((lambda n m, refl ?) : forall n m : nat, n * (S m) == n * m + n)

now reducing = add_reducing ( * ) [eager, eager]
now betas = add_betas [mult_O, mult_S]

let one = S O
let two = S one
let three = S two
let four = S three
let five = S four
let six = S five
let seven = S six
let eight = S seven
let nine = S eight
let ten = S nine

do whnf (two * three * four)

