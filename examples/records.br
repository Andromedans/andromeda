(* Demonstration of record types. *)

Definition Type := Universe f0.
Parameter A B : Type.
Parameter T : A -> Type.

Parameter a b : A.
Parameter c : B.
Parameter f : forall x : A, T x.

(* The dependent sum of B. *)
Definition cow := { horn : A ; bull : T horn }.

(* Using the "as" keyowrd we may locally rename a field. *)
Definition goat := { horn as x : A ; bull : T x }.

(* We can also hide a field from other fields using "as _". 
   In the following example the beak field is invisible in tail. *)
Definition chicken := { beak as _ : A ;
                        tail : A }.

(* With nested records this allows us to refer to "outer" fields. *)
Definition dragon :=
  { head as x : A ;
    tail : A ;
    body : {
      head : B ;
      tail : T x
    }
  }.

Definition viserion : dragon :=
  { head = a ;
    tail = a ;
    body = { head as _ = c ; tail = f head }
  }.

Definition rhaegal :=
  { head = a ;
    tail = head ;
    body = { head = c ; tail as _ = f tail }
  }.

(* The eta rules are built in. *)

Definition foo := { one = a ; two = { three = b ; four = one }}. 
Definition bar := { one = a ; two = { three = b ; four = (fun x : A => x) a }}.
Definition baz := (refl foo :: foo == bar).

Definition qux := foo.two :: { three : A ; four : A }.
Definition quux := foo.two.four :: A.
