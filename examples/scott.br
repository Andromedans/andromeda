(* We assume the existence of a type D which is equal to its function space. Then we show
   that D has a fixpoint opreator that computes the fixed point of any function. We also
   inhabit an arbitrary type. *)

assume D : Universe f0
assume scott : (D -> D) == D
equation scott

define fix :=
  fun (f : D -> D) =>
    equation scott in
      (fun (x : D) => f ((x :: D -> D) x)) (fun (x : D) => f ((x :: D -> D) x))

(* This seems hard to prove, either Brazil doesn't get it,
   or it goes into a loop.

define fix_eq :=
  fun (f : D -> D) =>
    (refl (fix f) :: f (fix f) == fix f)

*)