Parameter A : Type.
Parameter a : A.
Let id := (fun (x : A) => x).
Parameter P : A -> Type.
Parameter u : P a.
Let v := (u :: P (id a)).

(* Natural numbers *)
Parameter o : Type.
Parameter z : o.
Parameter s : o -> o.

Let nat := (o -> o) -> (o -> o).

Let zero := (fun (f : o -> o) (x : o) => x).
Let one := (fun (f : o -> o) (x : o) => f x).
Let two := (fun (f : o -> o) (x : o) => f (f x)).
Let three := (fun (f : o -> o) (x : o) => f (f (f x))).

Let succ := (fun (n : nat) (f : o -> o) (x : o) => (n f) (f x)).
Let plus := (fun (n m : nat) (f : o -> o) (x : o) => (n f) (m f x)).

Let four := plus two two.

Let ssssz := four s z.

Let foo := refl ssssz :: plus two two s z == four s z.

Let bar := refl ssssz :: plus two two s z == four s z.

#context