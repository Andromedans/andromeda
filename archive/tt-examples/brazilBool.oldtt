assume bool : Type
assume true false : bool
assume cond : (A : QuasiType 1) -> bool -> A -> A -> A

assume cond_true  : (A : QuasiType 1) -> (a : A) -> (b : A) -> (cond A true a b == a @ A)
assume cond_false : (A : QuasiType 1) -> (a : A) -> (b : A) -> (cond A false a b == b @ A)

assume bool_ind : (P : bool -> QuasiType 1) -> P false -> P true -> (b : bool) -> P b

assume nat : Type
assume zero : nat

define P := fun (b : bool) => cond (QuasiType 0) b nat nat

define P_is_constant :=
  fun b : bool =>
  handle
    bool_ind (fun b => P b == nat @ QuasiType 0)
       (refl (nat :> QuasiType 0))
       (refl (nat :> QuasiType 0))
       b
  with
      (cond_true (QuasiType 0) nat nat)
    | (cond_false (QuasiType 0) nat nat)
  end

define P_is_constant' :=
  fun b : bool =>
    bool_ind (fun b => P b == nat @ QuasiType 0)
       (cond_false (QuasiType 0) nat nat)
       (cond_true (QuasiType 0) nat nat)
       b

assume x : bool

define answer :=
   handle 
     (zero :> P x)
   with
     (P_is_constant x)
   end

#context