(* Simple products with an eta rule. *)

constant prod : forall (_ _ : Type), Type

constant Pair : forall (A : Type) (B : Type) (_ : A) (_ : B), prod A B

constant Fst : forall (X Y : Type) (_ : prod X Y), X
constant Snd : forall (X Y : Type) (_ : prod X Y), Y

constant Pair_beta_Fst :
  Π (U V : Type) (u : U) (v : V),
    (Fst V U (Pair V U v u)) == v

constant Pair_beta_Snd :
  Π (U V : Type) (u : U) (v : V),
    (Snd V U (Pair V U v u)) == u

constant Pair_eta :
  Π (U V : Type) (x y : prod U V),
    Fst U V x == Fst U V y ->
    Snd U V x == Snd U V y ->
    x == y

constant C : Type
constant D : Type
constant p : prod C D
constant q : prod C D

(* The following should fail (and not cycle forever). TODO
do
  with local (lbeta Pair_beta_Fst) handle
  with local (lbeta Pair_beta_Snd) handle
  with local (leta Pair_eta) handle
    refl p : p == q
*)

