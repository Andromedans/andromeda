constant cow : Type
constant horn : cow

operation lookup 0
operation update 1

let state =
  fun s0 =>
    handler
    | val ?x => (fun _ => x)
    | lookup => (fun s => yield s s)
    | update ?s => (fun _ => yield horn s)
    | finally ?f => f s0
    end

constant N : Type
constant z : N
constant s : N -> N
constant f : N -> N -> N -> N

do
  with state z handle
    let a = lookup in
    let _ = update (s a) in
    let b = lookup in
      f a b (s lookup)

