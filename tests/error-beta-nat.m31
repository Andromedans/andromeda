constant N : Type
constant Z : N
constant S : N -> N
constant plus : N -> N -> N
constant plus_Z : Î  (x : N), plus x Z == x
constant plus_S : Î  (x y : N), plus x (S y) == S (plus x y)

do
  now betas = add_beta plus_S betas in
    Type

(* This is supposed to fail. *)
do
  now betas = add_betas [plus_Z,plus_S] betas in
   (refl (S (S Z))) : plus (S Z) (S (S Z)) == S (S Z)

