
dynamic fixed = None

let fix f x =
 let g x =
   let self = (match fixed with Some ?self => self end) in
   f self x
 in
 now fixed = Some g in 
 g x

let iter f = fix (fun iter l => match l with [] => () | ?x :: ?l => f x; iter l end)

let _ = iter print [None,Some [],Some [None]]

let _ = print ("fixed", fixed)
