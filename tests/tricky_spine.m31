(* Here is an example where we assume an equality that
   allows us to create weird beta redeces, and therefore
   also weird spines. *)

constant Bool : Type
constant Nat : Type

constant true : Bool
constant false : Bool

constant zero : Nat
constant succ : Nat → Nat
constant plus : Nat → Nat → Nat
constant iszero : Nat → Bool

constant eq1 : (Nat → Bool) ≡ (Nat → Nat)
constant eq2 : (Nat → Nat) ≡ (Nat → Bool)

let f = (λ (n : Nat), iszero (succ n))
do f

(* Succeed *)
do
  now hints = add_hint eq1 in
    (f : Nat → Nat)

(* Fail *)
fail
  now hints = add_hint eq2 in
    (f : Nat → Nat)

