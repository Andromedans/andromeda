
signature wrap = { T : Type, x : T }

constant A : Type
constant a : A

do { T = A, x = a }

do { T, x = a } : {wrap with T = A, x}

do { T, x } : {wrap with T = A, x = a}

constant exfalso : forall (T : Type), T

let exwrap = {wrap with T as X, x = exfalso X}

let bob = { T = A, x } : exwrap

do bob

do bob.x

let l_T = ident T
let l_x = ident x

let aT = assume T : Type in T

let exwrap' = _sig wrap [(Inl aT),(Inr (exfalso aT))]

do equal exwrap exwrap'

let guy = _struct exwrap' [A]
do equal bob guy

let A' = _proj guy l_T
do A'

do _proj guy l_x

