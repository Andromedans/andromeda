rule A type ;;
rule B (_ : A) (_ : A) type ;;
rule Π (X type) ({x:X} Y type) type ;;

rule a : A ;;
rule b : A ;;

congruence a a ;;

rule isPropA (a : A) (b : A) : a ≡ b : A ;;

congruence (B a a) (B a b) (congruence a a) (isPropA a b) ;;

let congrB b1 b2 =
  match (b1, b2) with
  | (B u1 v1, B u2 v2) ->
    congruence b1 b2 (isPropA u1 u2) (isPropA v1 v2)
  end
;;

congruence (Π A ({x} B x x)) (Π A ({x} B a a)) (congruence A A) ({x} congrB (B x x) (B a a))
;;

rule A' type ;;
rule α : A ≡ A' ;;
rule α' : A' ≡ A ;;

let isPropA' x y = convert (isPropA (convert x α') (convert y α')) α ;;

{x' y' : A'} isPropA' x' y' ;;

rule B' (_ : A') (_ : A') type ;;
rule β (x : A) (y : A) : B x y ≡ B' (convert x α) (convert y α) ;;

congruence (Π A ({x} B x x)) (Π A' ({y} B' y y)) α ({z} β z z)