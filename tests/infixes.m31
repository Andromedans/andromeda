
(** TT infixes *)
constant A : Type

constant a b c d : A

constant ( + ) ( - ) ( ^ ) ( / ) : A -> A -> A

let s = (-) ((+) a b) ((^) c ((^) d d))

do refl s : a + b - (c ^ d ^ d) == (a + b) - (c ^ (d ^ d))

do match s with
  âŠ¢ ?x + ?y - ?z => (x, y, z)
  end

(** Infixes as bound variables *)
do lambda (( ++ ) : A -> A -> A) (x y : A), x ++ (y ++ x)

(** Infixes as atoms *)
do assume (++) : A -> A -> A in
   lambda (x y : A), x ++ (y ++ x)

(** Prefixes as bound variables *)
do lambda (( ??? ) : A -> A) (x y : A), ??? ??? x

(** Prefixes as atoms *)
do assume (???) : A -> A in
   lambda (x y : A), ??? ??? x


(** Data infixes *)

mltype suspended a b =
  (@) of a -> b and a
  end

let x = (fun x => x) @ a

do match x with
  | ?f @ ?y => f y
  end

(** Operation infixes *)

operation (??) : judgement -> judgement

do
handle
  let sa = ?? a in
  let sb = ?? b in
  sa + sb
with
  | ?? ?x => yield (x + x)
end

handle | ?? ?x => x + a end

do ?? b

