
(** TT infixes *)
constant A : Type

constant a b c d : A

constant ( + ) ( - ) ( ^ ) ( / ) : A -> A -> A

let s = (-) ((+) a b) ((^) c ((^) d d))

do refl s : a + b - (c ^ d ^ d) == (a + b) - (c ^ (d ^ d))

do match s with
  ⊢ ?x + ?y - ?z => (x, y, z)
  end

(** Infixes as bound variables *)
do lambda (( ++ ) : A -> A -> A) (x y : A), x ++ (y ++ x)

(** Infixes as atoms *)
do assume (++) : A -> A -> A in
   lambda (x y : A), x ++ (y ++ x)

(** Prefixes as bound variables *)
do lambda (( ??? ) : A -> A) (x y : A), ??? ??? x

(** Prefixes as atoms *)
do assume (???) : A -> A in
   lambda (x y : A), ??? ??? x


(** Data infixes *)

data (@) 2

let x = (fun x => x) @ a

do match x with
  | ?f @ ?y => f y
  end

(** Operation infixes *)

operation (?) 1

do
handle
  let sa = ? a in
  let sb = ? b in
  sa + sb
with
  | ? ?x => yield (x + x)
end

handle | ? ?x => x + a end

do ? b

signature monoid = { T : Type, (+) : T -> T -> T, assoc : ∏ (x y z : T), x + (y + z) == (x + y) + z }

constant unit_singleton : ∏ (x y : unit), x == y
let _ = add_eta unit_singleton

let unit_mon = { T = unit, (+) = λ x y, {}, assoc = λ x y z, unit_singleton (x + (y + z)) ((x + y) + z) }

let (++) = unit_mon.(+)
let ( * ) = unit_mon . ( + )

do refl (++) : (++) == ( * )

