constant N : Type
constant Z : N
constant S : N -> N

constant plus : N -> N -> N
now reducing = add_reducing plus [lazy,eager]

constant plus_Z : Π (x : N), plus x Z == x
constant plus_S : Π (x y : N), plus x (S y) == S (plus x y)

constant times : N -> N -> N
constant times_Z : Π (x : N), times x Z == Z
constant times_S : Π (x y : N), times x (S y) == plus x (times x y)

let one =   S Z
let two =   S (S Z)
let three = S (S (S Z))
let four =  S (S (S (S Z)))
let five =  S (S (S (S (S Z))))
let ten =   S (S (S (S (S (S (S (S (S (S Z)))))))))

do
  now betas = add_betas [plus_Z,plus_S] in
    refl (plus five four) : plus four five == plus (plus two three) four


do
  now betas = add_betas [plus_Z,plus_S] in
    refl three : three == plus one (plus one one)

do
  now betas = add_betas [plus_Z,plus_S,times_Z,times_S] in
    refl four : four == times two two
