
Axiom A : Type.

Axiom a : A.
Axiom b : A.
Axiom c : A.

Check match a with
  | |- b => 'b
  | [] |- a => 'a
  end.

Check match λ [x : A] a with
  | [x y z t x' y'] |- λ [x : y] z : Π [x' : y'] t => 'lambda x y z ('prod x' y' t)
  end.

Axiom list : Type.
Axiom nil : list.
Let cons := assume cons : A -> list -> list in cons. (* Matching constants of nonzero arity is broken. *)

Check match 'foo (cons a (cons b (cons c nil))) 'bar with
  | 'foo => 'no
  | [x y z t x' y'] |- λ [x : y] z : Π [x' : y'] t => 'lambda x y z ('prod x' y' t)
  | [x y] 'foo
    (|- cons _ ((cons x _) as y))
    'bar => 'pair x y
  end.

Check match {a : A, isconstr : forall [x : A] a == x} with
  | |- { a as b : _, isconstr : forall [_] a == _} => 'bad
  | |- { a : _, isconstr : forall [_] a == _} => 'ok
  end.
