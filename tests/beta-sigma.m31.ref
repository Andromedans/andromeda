Constant A is declared.

Constant B is declared.

Constant a is declared.

Constant b is declared.

Constant sigT is declared.

Constant existT is declared.

Constant projT1 is declared.

Constant projT2 is declared.

Constant projT1_beta is declared.

⊢ projT1_beta
  : Π (A0 : Type) (B0 : A0 → Type) (a0 : A0) (b0 : B0 a0), projT1 A0 B0
        (existT A0 B0 a0 b0) ≡ a0

⊢ refl a : projT1 A B (existT A B a b) ≡ a

Constant projT2_beta is declared.

⊢ refl b : projT2 A B (existT A B a b) ≡ b

Constant sig_ind is declared.

Constant sig_ind_beta is declared.

val projT1' :> judgment

⊢ λ (A0 : Type) (B0 : A0 → Type) (s : sigT A0 B0), sig_ind A0 B0
        (λ (_ : sigT A0 B0), A0)
        ((λ (X : Type) (Y : X → Type) (x : X) (_ : Y x), x) A0 B0) s
  : Π (A0 : Type) (B0 : A0 → Type) (s : sigT A0 B0),
        (λ (_ : sigT A0 B0), A0) s

⊢ refl a
  : a ≡
    (λ (A0 : Type) (B0 : A0 → Type) (s : sigT A0 B0), sig_ind A0 B0
         (λ (_ : sigT A0 B0), A0)
         ((λ (X : Type) (Y : X → Type) (x : X) (_ : Y x), x) A0 B0) s) A B
    (existT A B a b)

⊢ refl a
  : projT1 A B (existT A B a b) ≡
    (λ (A0 : Type) (B0 : A0 → Type) (s : sigT A0 B0), sig_ind A0 B0
         (λ (_ : sigT A0 B0), A0)
         ((λ (X : Type) (Y : X → Type) (x : X) (_ : Y x), x) A0 B0) s) A B
    (existT A B a b)

val projT2' :> judgment

⊢ refl b
  : projT2 A B (existT A B a b) ≡
    (λ (A0 : Type) (B0 : A0 → Type) (s : sigT A0 B0), sig_ind A0 B0
         (λ (s0 : sigT A0 B0), B0
              ((λ (A1 : Type) (B1 : A1 → Type) (s1 : sigT A1 B1), sig_ind
                    A1 B1 (λ (_ : sigT A1 B1), A1)
                    ((λ (X : Type) (Y : X → Type) (x : X) (_ : Y x), x) A1
                    B1) s1) A0 B0 s0)) (λ (x : A0) (y : B0 x), y) s) A B
    (existT A B a b)

