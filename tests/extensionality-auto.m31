let eqext =
   (lambda A a b p q,
      refl p)
   : forall (A : Type) (a b : A) (p q : a == b), p == q

do eqext

let funext =
  (lambda A B f g p,
    with local (lhint p) handle
    refl f : f == g)
  : forall (A : Type) (B : A -> Type) (f g : forall (x : A), B x),
     (forall (x : A), f x == g x) -> f == g

do funext

constant A : Type
constant B : A -> Type
signature cow = { head : A, tail : B head }

let cowext =
   lambda (a b : cow) (p : a.head == b.head),
     with local (lbeta p) handle
     lambda (q : a.tail == b.tail),
       (with local (lbeta q) handle
          refl a : a == b)

do cowext
