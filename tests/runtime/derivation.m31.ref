val cow :> mlforall α β, (α → β) → α → β = <function>
val chicken :> derivation → judgement → judgement → judgement =
  <function>
Rule A is postulated.
Rule a is postulated.
Rule B is postulated.
Rule s is postulated.
val d :> derivation = derive (x : A) (y : A) → s x x y : B x x y
- :> judgement = ⊢ s a a a : B a a a
val e :> derivation = derive ({_ : A} {_ : A} T type) (a : A) → T {a} {a}
  type
- :> judgement → judgement → judgement = <function>
- :> judgement = ⊢ B a a a type
- :> judgement = ⊢ B a a a type
