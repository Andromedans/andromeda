constant Unit : Type
constant top : Unit
constant Unit_rect : ∀ (P : Unit -> Type), (P top) -> ∀ (n : Unit), P n

constant Unit_iota_top : ∀ (P : Unit -> Type) (s : P top), Unit_rect P s top == s

let it = (λ (T : Type), Unit_rect (λ (_), T -> T) (λ (x : T), x))

let betas = add_beta top_betas top_hints Unit_iota_top

(* TODO loops
check refl top : top == (Unit_rect   (λ (_), Unit -> Unit)) (λ (x : Unit), x) top top
check refl top : top == (Unit_rect   (λ (_), Unit -> Unit) (λ (x : Unit), x)) top top
check refl top : top == ((Unit_rect  (λ (_), Unit -> Unit) (λ (x : Unit), x)) top) top
check refl top : top == (((Unit_rect (λ (_), Unit -> Unit)) (λ (x : Unit), x)) top) top
check refl top : top == ((Unit_rect  (λ (_), Unit -> Unit)) (λ (x : Unit), x)) top top
*)

