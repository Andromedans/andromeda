constant N : Type
constant Z : N
constant S : N ⟶ N
constant plus : N ⟶ N ⟶ N
constant plus_Z : Π (x : N), plus x Z == x
constant plus_S : Π (x y : N),  plus x (S y) == S (plus x y)

do
  now betas = add_beta plus_S in
    Type

do
  now betas = add_beta plus_Z in
    (refl (S (S Z))) : plus (S (S Z)) Z == S (S Z)

do
  now betas = add_betas [plus_Z,plus_S] in
   (refl (S (S Z))) : plus (S Z) (S Z) == S (S Z)

(* Now we trying something a bit fancier. *)
do
  now betas = add_betas [plus_Z,plus_S] in
     λ (x y : N),
       refl (S (S (plus x y))) : plus x (S (S y)) == S (S (plus x y))

