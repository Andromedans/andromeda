
Let print := external "print".

Let congr := (lambda [A f g u v eqf equ] handle congruence (f u) (g v) with
  | #equal ('pair f g) => yield ('some eqf)
  | #equal ('pair u v) => yield ('some equ)
  | #equal ('pair ?a ?b) =>
    let _ := print ('congr a b) in
    let eq := congruence a b in
    yield ('some eq)
  end) :: forall [A : Type] [f g : A -> A] [u v : A] f == g -> u == v -> f u == g v.

