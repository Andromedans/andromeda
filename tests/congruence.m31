
data congr 2

let congr = (lambda (A f g u v eqf equ), handle
  match congruence (f u) (g v) with
    | Some ?eq => eq
  end with
    | equal f g => yield (Some eqf)
    | equal u v => yield (Some equ)
  end) : forall (A : Type) (f g : A -> A) (u v : A), f == g -> u == v -> f u == g v

check congr

