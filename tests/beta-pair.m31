Parameter Pair : Type -> Type -> Type.

Parameter pair :
  Π [A B : Type]
    A -> (B -> (Pair A B)).

Parameter fst :
  Π [X Y : Type] Pair X Y -> X.

Parameter beta_fst :
  Π [U V : Type, u : U, v : V]
    (fst V U (pair V U v u)) == v.

Parameter C : Type.
Parameter D : Type.
Parameter c : C.
Parameter d : D.

(* just a pair *)
Check beta beta_fst in
    (refl (fst C D (pair C D c d)))
         ::
         c == (fst C D (pair C D c d)).

(* change the order of the parameters *)
Check beta beta_fst in
       (refl (fst D C (pair D C d c)))
         ::
         d == (fst D C (pair D C d c)).

(* add a lambda redex in the proof *)
Check beta beta_fst in
    (refl (fst C D (pair C D ((λ [t : Type, x : t] x) C c) d)))
         ::
         c == (fst C D (pair C D c d)).

(* add a lambda redex in the type *)
Check beta beta_fst in
    (refl (fst C D (pair C D c d)))
         ::
         c == (fst C D (pair C D ((λ [t : Type, x : t] x) C c) d)).
