constant product : Type -> Type -> Type

constant pair :
  Π (A B : Type),
    A -> (B -> (product A B))

constant fst :
  Π (X Y : Type), product X Y -> X

constant beta_fst :
  Π (U V : Type) (u : U) (v : V),
    (fst V U (pair V U v u)) == v

constant C : Type
constant D : Type
constant c : C
constant d : D

(* just a pair *)
do
  now betas = add_beta beta_fst betas in
    (refl (fst C D (pair C D c d)))
         :
         c == (fst C D (pair C D c d))

(* change the order of the parameters *)
do
  now betas = add_beta beta_fst betas in
       (refl (fst D C (pair D C d c)))
         :
         d == (fst D C (pair D C d c))

(* add a lambda redex in the proof *)
do
  now betas = add_beta beta_fst betas in
    (refl (fst C D (pair C D ((λ (t : Type) (x : t), x) C c) d)))
         :
         c == (fst C D (pair C D c d))

(* add a lambda redex in the type *)
do
  now betas = add_beta beta_fst betas in
    (refl (fst C D (pair C D c d)))
         :
         c == (fst C D (pair C D ((λ (t : Type) (x : t), x) C c) d))


