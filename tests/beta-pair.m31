Parameter Pair : Type -> Type -> Type.

Parameter pair :
  forall (A : Type) (B : Type),
    A -> (B -> (Pair A B)).

Parameter fst :
  forall (X : Type) (Y : Type), Pair X Y -> X.

Parameter beta_fst :
  forall (U V : Type) (u : U) (v : V),
    (fst U V (pair U V u v)) == u.

(* fails for now *)
(* compute the ascription: first compute the refl which yields that the refl *)
(* has type t' = fst … == fst … , then check if it matches the ascribed type, *)
(* which triggers Eq A (fst …) (fst …) =?= Eq A (fst …) a which should at some *)
(* point ask (fst …) =?= a, which in turn tries to whnf (fst …), entering *)
(* [whnf_spine] and [try_beta] with debugging time around 27790 *)
Let boa :=
  beta beta_fst in
    (fun (C D : Type) (c : C) (d : D) =>
       (refl (fst C D (pair C D ((fun (t : Type) (x : t) => x) C c) d)))
         ::
         c == (fst C D (pair C D c d))
).

Check boa.
