(* Simple products with an eta rule. *)

constant prod : forall (_ _ : Type), Type

constant Pair : forall (A B : Type) (_ : A) (_ : B), prod A B

constant Fst : forall (X Y : Type, _ : prod X Y), X
constant Snd : forall (X Y : Type) (_ : prod X Y), Y

constant Pair_beta_Fst :
  ∀ (U V : Type, u : U, v : V),
    (Fst V U (Pair V U v u)) ≡ v

constant Pair_beta_Snd :
  ∀ (U V : Type) (u : U) (v : V),
    (Snd V U (Pair V U v u)) ≡ u

constant Pair_eta :
  ∀ (U V : Type) (x y : prod U V),
    Fst U V x ≡ Fst U V y ->
    Snd U V x ≡ Snd U V y ->
    x ≡ y

constant C : Type
constant D : Type
constant p : prod C D


(* Beta rules. *)
do
  (λ (c : C) (d : D),
    with local (lbeta Pair_beta_Fst) handle
      refl c : Fst C D (Pair C D c d) ≡ c)

do
  (λ (c : C) (d : D),
    with local (lbeta Pair_beta_Fst) handle
    with local (lbeta Pair_beta_Snd) handle
      refl d : Snd C D (Pair C D c d) ≡ d)

(* Surjective Pairing. *)
(* TODO eta hints
do with equality_in betas hints handle
  let _ = beta Pair_beta_Fst in
  let _ = beta Pair_beta_Snd in
  let _ = eta Pair_eta in
     refl p : p ≡ Pair C D (Fst C D p) (Snd C D p)
*)

