(* Simple products with an eta rule. *)

constant prod : forall (_ _ : Type), Type

constant pair : forall (A B : Type) (_ : A) (_ : B), prod A B

constant fst : forall (X Y : Type) (_ : prod X Y), X
constant snd : forall (X Y : Type) (_ : prod X Y), Y

now reducing = add_reducing fst [lazy,lazy,eager]
now reducing = add_reducing snd [lazy,lazy,eager]

constant pair_beta_fst :
  ∀ (U V : Type) (u : U) (v : V),
    (fst V U (pair V U v u)) ≡ v

constant pair_beta_snd :
  ∀ (U V : Type) (u : U) (v : V),
    (snd V U (pair V U v u)) ≡ u

constant pair_eta :
  ∀ (U V : Type) (x y : prod U V),
    fst U V x ≡ fst U V y ->
    snd U V x ≡ snd U V y ->
    x ≡ y

constant C : Type
constant D : Type
constant p, q : prod C D


(* Beta rules. *)
do
  (λ (c : C) (d : D),
    now betas = add_beta pair_beta_fst in
      refl c : fst C D (pair C D c d) ≡ c)

do
  (λ (c : C) (d : D),
    now betas = add_betas [pair_beta_fst,pair_beta_snd] in
      refl d : snd C D (pair C D c d) ≡ d)

(* Surjective pairing. *)
do
  now betas = add_betas [pair_beta_fst,pair_beta_snd] in
  now etas = add_eta pair_eta in
     refl p : p ≡ pair C D (fst C D p) (snd C D p)

fail
  now etas = add_eta pair_eta in
  refl p : p == q

