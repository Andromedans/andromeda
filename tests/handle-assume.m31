constant A : Type
constant B : A -> Type
constant Q : Π (X : Type) (P : X -> Type) (x : X), P x → Type

operation inhabit 1

(* Works *)
do
  handle
    λ (a : A), Q A (inhabit (A -> Type)) a
  with
  | inhabit ?T => assume hyp : T in yield hyp
  end

(* Fails *)
do
  handle
    λ (a : A), Q A B a (inhabit (B a))
  with
  | inhabit ?T => assume hyp : T in yield hyp
  end

