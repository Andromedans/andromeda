
handle
  | abstract v1 v2 =>
    match pair v1 v2 with
      | pair (|- ?x : ?tx) (|- ?y : ?ty) =>
        assume y_ : forall x_ : tx, ty where x = x_ in
        Some ((y_ x) : ty)
    end
end

(* Simple example. *)
check lambda T : Type, assume x : T in x

constant A : Type
constant a : A
constant P : A -> Type
constant f : forall x : A, P x -> A

check lambda x : A, assume p : P x in assume q : f x p == a in q

check lambda x : A, assume T : Type in assume q : T in assume p : P x in (q where T = (f x p == a))
