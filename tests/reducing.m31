
signature lci = { T : Type, (+) : T -> T -> T }

constant N : Type
constant Z : N
constant S : N -> N

constant N_lci : {lci with T = N}
let (+) = N_lci.(+)

constant plus_Z : forall n : N, Z + n == n
constant plus_S : forall n m : N, (S n) + m == S (n + m)

(* Reducing argument for a projection *)
now reducing = add_reducing ( + ) [eager,lazy]
now betas = add_betas [plus_S,plus_Z]

do whnf (Z + Z)
do whnf ((Z + Z) + Z)
do whnf (((S Z) + (S Z)) + ((S Z) + (S Z)))

do
  (* Reducing argument for a constant *)
  now reducing = add_reducing S [eager] in
  whnf (((S Z) + (S Z)) + ((S Z) + (S Z)))

fail add_reducing ((+) Z) [lazy]
