let Nat = forall (X : Type), (X -> X) -> X -> X

do Nat

let zero =
    (λ (A s z), z) : Nat

do zero

let one =
    (λ (A s z), s z) : Nat

do one

let two =
    (λ (A s z), s (s z)) : Nat

do two

let three =
    (λ (A s z), s (s (s z))) : Nat

do three

let succ =
    (λ (n : Nat),
    λ (B : Type, s : B -> B, z : B),
    s (n B s z)) : Nat -> Nat

do succ

let succ' =
    (λ (n : Nat) (A s z), n A s (s z)) : Nat -> Nat

do succ'

let add =
    (λ (m n, A, s z), m A s (n A s z)) : Nat -> Nat -> Nat

do add

let mult =
    (λ (m n : Nat, A : Type, s : A -> A), m A (n A s))
    : Nat -> Nat -> Nat

do mult

constant N : Type
constant Z : N
constant S : N -> N

do (refl (succ three N S Z) : add one three N S Z == mult (succ' one) two N S Z)

