Let Nat := forall X : Type, (X -> X) -> X -> X.

Let zero :=
    (fun (A : Type) (s : A -> A) (z : A) => z) :: Nat.

Let succ :=
    (fun (n : Nat) =>
    fun (B : Type) (s : B -> B) (z : B) =>
    s (n B s z)) :: Nat -> Nat.

Let succ' :=
    (fun (n : Nat) =>
    fun (A : Type) (s : A -> A) (z : A) =>
    n A s (s z)) :: Nat -> Nat.

Let add :=
    (fun (m n : Nat) =>
    fun (A : Type) (s : A -> A) (z : A) =>
    m A s (n A s z)) :: Nat -> Nat -> Nat.

Let mult :=
    (fun (m n : Nat) =>
    fun (A : Type) (s : A -> A) =>
    m A (n A s)) :: Nat -> Nat -> Nat.

#context

Let one := (succ zero :: Nat).
Let two := (add one one :: Nat).
Let four := (mult two two :: Nat).
