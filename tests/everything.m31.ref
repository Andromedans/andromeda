Operation unary_op is declared.
Operation nonary_op is declared.
ML type dummy declared.
ML type color declared.
Constant A is declared.
Constant a is declared.
Constant b is declared.
Constant ( + ) is declared.
Constant ( * ) is declared.
Constant ( ^ ) is declared.
Constant ( - ) is declared.
Constant ( <= ) is declared.
⊢ λ (x : A) (y : A) (z : A) (w : A), x + y * z ^ x ^ y - (z ^ x) ^ y <= w
  : A → A → A → A → A
x0 is defined.
dummy
The command failed with error:
File "./everything.m31", line 72, characters 6-9: Typing error
  this expression should be a product, found Type
⊢ refl Type : Type ≡ Type
The command failed with error:
File "./everything.m31", line 86, characters 6-18: Runtime error
  cannot infer the type of T
⊢ λ (T : Type) (x : T), x : Π (A0 : Type), A0 → A0
⊢ λ (x : A), x : A → A
The command failed with error:
File "./everything.m31", line 94, characters 13-25: Runtime error
  cannot infer the type of x
y_combinator is defined.
f is defined.
g is defined.
("f", ("g",
"foo"))
((),
())
()
Operation get is declared.
Operation set is declared.
state_h is defined.
⊢ b : A
⊢ Type : Type
(⊢ a : A) :: (⊢ b : A) :: (⊢ A : Type) :: <function> ::
[]
[]
(⊢ a : A, ⊢ b : A,
⊢ A : Type)
"a string\nspecial characters aren't"
register is defined.
()
⊢ b : A
⊢ A : Type
x₀ : A 
⊢ x₀ : A
"this will happen"
()
alpha_equal is defined.
Tvar is defined.
yvar is defined.
dependent is defined.
Some
(⊢ Type : Type)
None
(T₀ : Type 
 ⊢ T₀ : Type) :: (T₀ : Type 
                      x₁ : T₀ 
                      ⊢ x₁ : T₀) ::
[]
Operation emit is declared.
(x₀ : A 
 ⊢ x₀ : A) ::
[]
Constant eq is declared.
⊢ refl a : a ≡ a
⊢ refl a : a ≡ b
Some
(⊢ refl ((λ (x : A), x) a) : (λ (x : A), x) a ≡ a)
Some
(⊢ refl ((λ (x : A), x) a) : (λ (x : A), x) a ≡ (λ (x : A), x) b)
⊢ λ (A0 : Type) (x : A0) (y : A0) (p : x ≡ y) (_ : x ≡ y), refl p
  : Π (A0 : Type) (x : A0) (y : A0) (p : x ≡ y) (q : x ≡ y), p ≡ q
#including ./../std/hippy.m31
#processed ./../std/hippy.m31
