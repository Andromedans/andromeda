
(** Toplevel commands *)

mltype dummy = | dummy end

mltype color =
  | black
  | rgb_color of dummy and dummy and dummy
  end

(** Declare operations *)
(* operation `name : type` *)
operation unary_op : _ -> color
operation nonary_op : color


(** Declare constants *)
(* constant `names` : `type` *)
constant A : (* the type of types *) Type
constant a b : A
(* Ocaml-style infixes are valid `name`s and `label`s *)
constant ( + ) ( * ) ( ^ ) ( - ) ( <= ) :
  (* non-dependent product type *) A -> A -> A

(* Infixes and prefixes are printed as such. *)
do lambda (x y z w : A), x + y * z ^ x ^ y - (z ^ x) ^ y <= w

(** Install a top level handler *)
(*
  Top level handlers are callbacks for operations. Therefore `yield` is not available.
  A top level case `op => c` is equivalent to a handler case `op => yield c`.

  Unlike handlers, operations emitted inside a top-level case will be handled by the top-level handler.
  Therefore a case `op => op` will loop (and consume large amounts of memory fast).
*)

handle
  (* The first | may be omitted in all matching-like statements *)
    unary_op _ =>
      (* Operations and data constructors are curried, but must be fully applied. *)
      rgb_color dummy dummy dummy

(*
  A top-level case for an operation `op` replaces any previously installed top-level case for `op`.
  In order to avoid confusion, patterns are not allowed for top-level cases.
  Then to preserve functionality a case `op : ?t => c` will assign
    `None` to `t` if the operation was emitted in infer mode,
    and `Some v` if it was emitted in checking mode for type `v`.
*)
  | nonary_op : ?t =>
    (* Meta-level matching of values. Patterns are not linear. On judgements, equality is alpha equality. *)
    match t with
      | None => black
      | Some ?t => black
    end
end

(* `assume x : t in c` creates a new free variable `xi : t`
   where `xi` is an atom based on the given name,
   then binds `x` to it within `c`.
   Note that `xi` may (and often does) escape this scope. *)
do assume t : Type in
   assume x : t in x

(** Top level let-binding *)
let x0 = dummy

(** Evaluate a computation *)
(* This may have side effects through `ref` *)
do x0

(** Evaluate a failing computation *)
(* This may not have side effects, it only verifies that the computation fails and fails if it does not. *)
fail Type Type

(** Change verbosity level *)
verbosity 3
do refl Type : Type == Type
verbosity 2 (* default *)


(** Non top level constructs *)

(** Checking mode and infer mode *)
(* Most computations are evaluated in a naive way.
   However if we know that a computation should evaluate to a term of a given type,
   a more refined strategy can be used: *)
fail lambda T x, x

(* Type ascription `c : c'` is one way to evaluate in checking mode.
   Checking mode allows inferring type annotations for the arguments of a lambda. *)
do (lambda T x, x) : forall (A : Type), A -> A

(* Checking mode is preserved by some constructs but not all: *)
do (let _ = Type in lambda x, x) : A -> A
fail handle (lambda x, x) with end

(** Meta functions *)

(* We have mutual recursive definitions.  *)
(* Top-level recursive definition: *)
let rec f x = ("f", g x)
    and g y = ("g", y)
(* And local recursive definition: *)
do let rec f x = ("f", g x)
        and g y = ("g", y)
   in f "foo"

(** Externals *)
(* Some functions are provided by the kernel without using up a keyword: *)
do external "print" ((),())

(** General handlers *)
(* Handlers can be used to provide a wide range of effects.
   The keyword `yield` is used to access the current continuation.
   Handlers are first class values, so they can be parametrised using functions and even made recursive.
*)
operation get : judgement
operation set : judgement -> mlunit
let state_h init = handler
  | val ?v => fun _ => v
  | get => fun s => yield s s
  | set ?s => fun _ => yield () s
  | finally ?f => f init
end

do with state_h a handle set b; get
(* One-time handlers can be defined in place *)
do handle get with get => Type end


(** Native data structures *)

(* Some datatypes are predefined, for instance options *)
do None
do Some "foo"

(* Strings are there to, but we can only compare and print them. *)
do "a string\nspecial characters aren't"

(* Lists *)
do "foo" :: ["bar", "baz"]
do []

(* Tuples (2 ary or more) *)
do (a,b,A)


(** References *)
(* References provide a global state where handler effects can only be local to at most a top level command.
   Note that inaccessible references remain in memory without being garbage collected. *)
let register = ref a
do register := b
do !register

(** Sequencing *)
do register := A; !register

(** Substitution *)
(* Free variables created by `assume` can be substituted by a term of the same type in a judgment.
   This is also possible with variables created by type theory binders (lambda, product, ...) but not recommended. *)
do let var = assume T : Type in T in
   assume x : var in (x where var = A)

(** Matching *)
do match ((lambda (x : A), x) a, b, A) with
  | (|- a,_,_) => print "this won't happen"
  (* Matching under binders can be done as `lambda (?y : ...), e`
     to bind a free variable suitable for substitution to y, since `e` may depend on it. *)
  | (|- (lambda (?y), y) _,|- _ : ?t,|- ?t) => print "this will happen"
  | _ => print "this won't happen either"
end

(* Patterns are non linear, so we can check alpha-equality of terms.
   `match y with x => true | _ => false end` may be slightly more efficient. *)
let alpha_equal x y = match (x,y) with
  (?a,?a) => print "true"
  | _ => print "false"
end

(** Variable management *)
(* The variables a judgement depends on can be inspected in 2 ways *)
let Tvar = assume T : Type in T
let yvar = ref Type
let dependent =
  assume y : Tvar in
  yvar := y; (* this variable will not appear in x *)
  assume x : Tvar in
  x

(* `occurs x v` returns `Some t` if `v` depends on `x` with type `v`, `None` otherwise.
   Note that the type of the term `x` may be different from `t` due to conversions or substitutions.
*)
do occurs Tvar dependent
do occurs !yvar dependent

(* `context (xi : Ai |- v : Tv)` returns the list of judgements `xi : Ai |- xj : Aj` (with only the necessary `xi` for each) *)
do context dependent

(* Some variables were introduced by binders and are intended to disappear.
   It is unwise to assume free variables which depend on them, to substitute them,
   and to substitute any variable they depend on.
   The list in debruijn index order can be accessed with `hypotheses`. *)
operation emit : list judgement -> _
do handle
    lambda (x : A), emit hypotheses
   with
   | val _ => []
   | emit ?v => v
   end

(** Equality *)
(* The kernel may ask for a witness of an equality (a term of that equality type) using the `equal 2` operation.
   Success is indicated by passing `Some` of that witness to the continuation, failure by passing `None`.
   If there are nested handlers for the `equal` operation it may be useful to bubble it upwards instead of passing `None`.
*)
constant eq : a == b

(* We can ask the kernel to produce equality witnesses (terms of type an equality) in only a few ways *)

(* `refl` *)
do refl a
(* checking mode for `refl` is special: without it we would be asked to solve `(a==a) == (a==b)` *)
do handle refl a : a == b with equal (|- a) (|- b) => yield (Some eq) end

(* `reduction` to apply the reduction rule for application of a lambda and projection of a structure.
   It may emit `equal` operations since it needs to verify equality of annotations.
   It may fail and therefore returns an option value. *)
do reduction ((lambda (x : A), x) a)

(* `congr_foo` to apply the appropriate congruence rule to the given premisses. *)
do congr_apply (assume x : A in x) (refl (lambda (x : A), x)) eq (refl A) (refl A)

(** Evaluate commands from another file *)
#include_once "../std/hippy.m31"

#include_once "everything.m31"

(* both can be used with multiple files at once *)
#include_once "../std/base.m31" "../std/equal.m31" "../std/base.m31"

