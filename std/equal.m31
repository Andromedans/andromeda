#include_once "utils.m31"
#include_once "hints.m31"

let typeof e =
  match e with ⊢ _ : ?A ⇒ A end

(* if `x : A` and `eq : A == B` return `x : B` *)
let convert x eq =
match (x, eq) with
  (|- _ : ?t, ⊢ _ : ?t == ?t') ⇒
  handle x : t' with coerce x t' ⇒ yield (Convertible eq) end
end

(* if `eq = (a == b : A)` and `eqt : A == B` return a witness of `(a == b : A) == (a == b : B)` *)
let convert_eq eq eqt =
match (eq, eqt) with
  | (_, ⊢ _ : ?t == ?t) ⇒ refl eq
  | (⊢ ?a == ?b, ⊢ _ : _ == ?t) ⇒
    congr_eq eqt (refl a) (refl b)
end

(* The term witnessing symmetry of equality. *)
let sym = λ (A : Type) (x y : A) (h : x ≡ y), handle refl x : y ≡ x with
  | equal x y ⇒
    yield (Some h)
  end

(* The term witnessing transitivity of equality *)
let tran = lambda (t : Type) (a b c : t) (eq1 : a == b) (eq2 : b == c),
  handle eq1 : a == c with
    | coerce (⊢ eq1 : a == b) (⊢ a == c) ⇒
      yield (Convertible (congr_eq (refl t) (refl a) eq2))
  end

(* Take `p : a == b` and return `refl b : a == b`. This is used to make
   witnesses of equalities small. *)
let hide_witness eq = match eq with
  ⊢ _ : ?a == ?b ⇒ match a with ⊢ _ : ?t ⇒
    handle refl b : a == b with equal b a ⇒ yield (Some (sym t a b eq)) end
  end end

(* Take `p : a == b` and return `refl a : b == a`. This is used instead
   of `sym` to keep witnesses of equality small. *)
let symmetry eq =
  match eq with
    ⊢ _ : ?a == ?b ⇒
      match a with ⊢ _ : ?t ⇒
        hide_witness (sym t a b eq)
      end
  end

(* As `symmetry` but for transitivity. *)
let transitivity eq1 eq2 =
  match (eq1, eq2) with
    | ((⊢ _ : ?a == ?b), (⊢ _ : ?b == ?c)) ⇒
      match a with ⊢ _ : ?t ⇒
        hide_witness (tran t a b c eq1 eq2)
      end
  end

(* Does atom a appear in e (with imps replaced with current values)? *)
let rec occurs_check imps a e =
  match occurs a e with
  | (Some _) as ?xi ⇒ xi
  | None ⇒
    (* it could still occur via imps *)
    let rec fold ctx =
      match ctx with
      | [] ⇒ None
      | ?b :: ?ctx ⇒
        match assoc_find b imps with
        | None ⇒ fold ctx
        | Some ?r ⇒
          match !r with
          | None ⇒ fold ctx
          | Some (|- _ : _ == ?e') ⇒
            match occurs_check imps a e' with
            | None ⇒ fold ctx
            | (Some _) as ?xi ⇒ xi
            end
          end
        end
      end
    in
    fold (context e)
  end

let rec prodify xs t =
  match xs with
    | [] => t
    | (|- ?x : ?u) :: ?xs =>
      let t = prodify xs t in
      forall (y : u), t where x = y
  end

let rec spine head es =
  match es with
    | [] => head
    | ?e :: ?es => spine (head e) es
  end

let rec lambdafy xs e =
  match xs with
  | [] => e
  | (|- ?x : ?t) :: ?xs =>
    let e = lambdafy xs e in
    lambda (y : t), 
      e where x = y
  end

(** Is e an imp applied to distinct atoms? *)
let imp_atoms imps e =
  let rec fold xs e =
    match e with
    | |- ?e ((_atom _) as ?x) =>
      match mem x xs with
      | mltrue => None
      | mlfalse => fold (x :: xs) e
      end
    | |- _atom ?a =>
      match assoc_find a imps with
      | None => None
      | Some ?r =>
        Some (a, r, xs)
      end
    | _ => None
    end
  in
  fold [] e

(* Helper functions for imps *)
let mk_imp xs T =
  let T = prodify xs T in
  assume imp : T in
  ((imp, ref None), spine imp xs)


(* Check that two types are equal *)
let rec equal_ty imps A B = equal_term imps A B

(* General equality check *)
and equal_term imps e1 e2 =
  match (e1, e2) with
  | (?e, ?e) => Some (refl e1)
  | _ =>
    let A = typeof e1 in
    match whnf_ty imps A with
    ⊢ ?eqA : _ == ?A' ⇒
      let e1' = convert e1 eqA
      and e2' = convert e2 eqA in
      let xiopt =
        (* Try to apply a general hint *)
        match apply_general_hint e1' e2' with
        | (Some _) as ?xiopt => xiopt
        | None =>
          match A' with
    
          | ⊢ _ == _ ⇒ extensionality e1' e2'
    
          | ⊢ forall (_), _ ⇒
            handle
              extensionality e1' e2'
            with
              equal ?a ?b ⇒ yield (equal_term imps a b)
            end
    
          | _ ⇒
            match apply_eta_hint imps e1' e2' A' with
            | None =>
              (* go to the normalization phase *)
              match (whnf_term imps e1', whnf_term imps e2') with
                (⊢ ?eq1 : _ == ?e1'', ⊢ ?eq2 : _ == ?e2'') ⇒
                match equal_term_whnf imps e1'' e2'' with
                | Some ?xi ⇒
                  Some (transitivity eq1 (transitivity xi (symmetry eq2)))
                | None ⇒ None
                end
              end
            | (Some _) as ?xiopt => xiopt
            end
          end
        end
      in
      match xiopt with
      | Some ?xi ⇒
        let delta = convert_eq (typeof xi) (symmetry eqA) in
        let xi' = convert xi delta in
          Some xi'
      | None ⇒ None
      end
    end
  end

and equal_term_whnf imps e1 e2 =
  let by_congruence _ =
    handle congruence e1 e2
    with equal ?x ?y => yield (equal_term imps x y)
    end
  in
  let finalize_congr eq =
    convert eq (convert_eq (typeof eq) (natural e1))
  in
  let eq_by_congruence =
    match (e1, e2) with

    | (?e, ?e) ⇒ Some (refl e1)

    | (⊢ forall (?x : ?A), ?B, ⊢ forall (?y : ?A'), ?B') ⇒
      match equal_ty imps A A' with
      | None => None
      | Some ?eqA =>
        let x' = convert x eqA in
        let B0' = B' where y = x' in
        match now hypotheses = x :: hypotheses in equal_ty imps B B0' with
        | None => None
        | Some ?eqB =>
          Some (finalize_congr (congr_prod x eqA eqB))
        end
      end

    | (⊢ lambda (?x : ?A), ?body, ⊢ lambda (?y : ?A'), ?body') ⇒
      match equal_ty imps A A' with
      | None => None
      | Some ?eqA =>
        let B = typeof body and B' = typeof body' in
        let x' = convert x (symmetry eqA) in
        let B0' = B' where y = x' in
        match now hypotheses = x :: hypotheses in equal_ty imps B B0' with
        | None => None
        | Some ?eqB =>
          let body0' = convert (body' where y = x') (symmetry eqB) in
          match now hypotheses = x :: hypotheses in equal_term imps body body0' with
          | None => None
          | Some ?eqbody =>
            Some (finalize_congr (congr_lambda x eqA eqB eqbody))
          end
        end
      end

    | (⊢ ?lhs == ?rhs, ⊢ ?lhs' == ?rhs') ⇒
      let t = typeof lhs and t' = typeof lhs' in
      match equal_ty imps t t' with
      | None => None
      | Some ?eqt =>
        let lhs0' = convert lhs' (symmetry eqt) in
        let rhs0' = convert rhs' (symmetry eqt) in
        match equal_term imps lhs lhs0' with
        | None => None
        | Some ?eqlhs =>
          match equal_term imps rhs rhs0' with
          | None => None
          | Some ?eqrhs =>
            Some (finalize_congr (congr_eq eqt eqlhs eqrhs))
          end
        end
      end

    | (⊢ refl ?e, ⊢ refl ?e') ⇒
      let t = typeof e and t' = typeof e' in
      match equal_ty imps t t' with
      | None => None
      | Some ?eqt =>
        let e0' = convert e' (symmetry eqt) in
        match equal_term imps e e0' with
        | None => None
        | Some ?eqe =>
          Some (finalize_congr (congr_refl eqt eqe))
        end
      end

    | (⊢ ?h1 ?a1, ⊢ ?h2 ?a2) ⇒
      match (typeof h1, typeof h2) with
      | (|- forall (?x1 : ?A1), ?B1, |- forall (?x2 : ?A2), ?B2) =>
        match equal_ty imps A1 A2 with
        | None => None
        | Some ?eqA =>
          let x1' = convert x1 eqA in
          let B2 = B2 where x2 = x1' in
          let h2 = h2 where x2 = x1' in
          match equal_ty imps B1 B2 with
          | None => None
          | Some ?eqB =>
            let eqprod = congr_prod x1 eqA eqB in
            let h2 = convert h2 (symmetry eqprod) in
            match equal_term_whnf imps h1 h2 with
            | None => None
            | Some ?eqh =>
              let a2 = convert a2 (symmetry eqA) in
              let equal_arg =
                match (is_arg_reducing h1, is_arg_reducing h2) with
                | (lazy, lazy) => equal_term imps a1 a2
                | (eager, eager) => equal_term_whnf imps a1 a2
                | (lazy, eager) =>
                  match whnf_term imps a1 with
                  |- ?eqa1 : _ == ?a1' =>
                    match equal_term_whnf imps a1' a2 with
                    | None => None
                    | Some ?eqa2 => Some (transitivity eqa1 eqa2)
                    end
                  end
                | (eager, lazy) =>
                  match whnf_term imps a2 with
                  |- ?eqa2 : _ == ?a2' =>
                    match equal_term_whnf imps a1 a2' with
                    | None => None
                    | Some ?eqa1 => Some (transitivity eqa1 eqa2)
                    end
                  end
                end
              in
              match equal_arg with
              | None => None
              | Some ?eqa =>
                Some (finalize_congr (congr_apply x1 eqh eqa eqA eqB))
              end
            end
          end
        end
      end

    | (_, _) ⇒ None
    end
  in
  match eq_by_congruence with
  | Some _ => eq_by_congruence
  | None =>
    (* Here we try to make one side equal to another by
       instantiating an imp *)
    match instantiate imps e1 e2 with
    | (Some _) as ?xi => xi
    | None =>
      match instantiate imps e2 e1 with
      | None => None
      | Some ?xi => Some (symmetry xi)
      end
    end
  end

(* Attempt to apply an eta hints to prove e1 == e2 at a whnf type A. *)
and apply_eta_hint imps e1 e2 A =
  let rec fold etas =
    match etas with
    | [] => None
    | ?h :: ?rem =>
      match generic_matcher (h e1 e2) A with
      | None => fold rem
      | Some ?e =>
        (* now we have e : forall [eqs[ea,eb]], ea == eb and we need to solve the eqs *)
        let rec auto e =
          match e with
          | |- _ : forall (_ : ?lhs == ?rhs), _ =>
            match equal_term imps lhs rhs with
            | Some ?eq => auto (e eq)
            | None => fold rem
            end
          | |- _ : _ == _ => Some e
          end
        in
        auto e
      end
    end
  in
  fold etas

(* Try to make a equal to b by instantiating an imp in a.
   This will work if a is an imp applied to suitable atoms. *)
and instantiate imps a b =  
  match imp_atoms imps a with
  | None => None
  | Some ((|- ?imp : ?impT), ?r, ?xs) =>
      (* TODO check that the context of b satisfies:
         if any current hypothesis x appears in context of b then it also appears in xs *)
    let solution =
      handle
        Some (lambdafy xs b : impT)
      with
        coerce (|- _ : ?A) ?B =>
          match equal_ty imps A B with
          | Some ?zeta => yield (Convertible zeta)
          | None => None
          end
      end
    in
    match solution with
    | None => None
    | Some ?solution =>
      match occurs_check imps imp solution with
      | None =>
        assume xi : imp == solution in
        r := Some xi ;
        equal_term imps a b
      | Some _ => None
      end
    end
  end

and whnf_ty imps A = whnf_term imps A

and whnf_term imps e =
  match whnf_term_no_betas imps e with
  | |- ?xi : _ == ?e' =>
    match apply_beta_hint e' with
    | Some (|- ?zeta : _ == ?e'') =>
      let theta = whnf_term imps e'' in
      transitivity xi (transitivity zeta theta)
    | None => xi
    end
  end

and whnf_term_no_betas imps e =
  match e with

  | ⊢ ?h ?a ⇒
    match whnf_term imps h with

    | ⊢ ?eqH : _ == ?h' ⇒
      let eqa = match is_arg_reducing h' with
        | lazy => refl a
        | eager => whnf_term imps a
        end
      in
      match eqa with
      |- _ : _ == ?a' =>
        let e0 = h a in (* e at its natural type *)
        let e1 = h' a' in
        let t_e0 = typeof e0 and t_e1 = typeof e1 in
        let zeta = (* e == e1 at type of e *)
          handle
            match congruence e0 e1 with
            | Some (⊢ ?zeta : ?zeta_ty) ⇒
              convert zeta (convert_eq zeta_ty (natural e))
            end
          with
          | coerce (|- _ : t_e1) t_e0 =>
          (* need to prove that type of h' a' == type of h a, so just recompute *)
            match equal_ty imps t_e1 t_e0 with
            | Some ?eqT => yield (Convertible eqT)
            | None => yield NotCoercible
            end
          | equal h h' ⇒ yield (Some eqH)
          | equal a a' => yield (Some eqa)
          end
        in
        match h' with
        | ⊢ (lambda (_), _) ⇒
          let e' = (* e1 at type of e *)
            match zeta with ⊢ _ : _ == ?e' ⇒ e' end
          in
          handle
            match reduction e' with
            | Some (⊢ ?xi : _ == ?e'') ⇒
              let theta = whnf_term_no_betas imps e'' in
              transitivity zeta (transitivity xi theta)
            | None ⇒ refl e
            end
          with
          | equal ?x ?y ⇒ yield (equal_term imps x y)
          end

        | ⊢ _ ⇒ zeta
        end
      end
    end

  | ⊢ _  ⇒
    match assoc_find e imps with
    | None ⇒ refl e
    | Some ?r ⇒
      match !r with
      | None ⇒ refl e
      | Some (⊢ ?xi : (e as ?e0) == ?e') ⇒
        let zeta = whnf_term_no_betas imps e' in
        let eq = transitivity xi zeta in
        (* eq is at typeof e0 but needs to be at typeof e *)
        convert eq (convert_eq (typeof eq) (transitivity (symmetry (natural e0)) (natural e)))
      end
    end

  end

operation ? : judgement

operation resolve : judgement → judgement

let rec resolver imps e =
  let rec fold eqs e hyps =
    match hyps with
    | [] ⇒ e
    | ((⊢ _atom _) as ?a) :: ?hyps ⇒
      match assoc_find a imps with
      | Some ?r =>
        match !r with
        | None => fold eqs e hyps
        | Some (⊢ ?eq : _ == ?e') ⇒
          let e' = resolver imps e' in
          let e = (e where a = e') in
          fold ((eq, refl e') :: eqs) e hyps
        end
      | None ⇒ 
        match assoc_find a eqs with
        | None => fold eqs e hyps
        | Some ?xi =>
          let e = (e where a = xi) in
          fold eqs e hyps
        end
      end
    end
  in
  fold [] e (context e)

let unify_prod imps A =
  match whnf_ty imps A with
  |- ?eq : _ == ?B =>
    match B with
    | |- forall (_), _ => Some (eq, imps)
    | _ =>
      match imp_atoms imps B with
      | None => None
      | Some (?imp, ?r, ?xs) =>
        match mk_imp xs Type with
        | (?impD, ?spineD) =>
          match mk_imp xs (spineD -> Type) with
          | (?impC, ?spineC) =>
            let C = lambdafy xs (forall (z : spineD), spineC z) in
            assume xi : imp == C in
            r := Some xi;
            let imps = impD :: impC :: imps in
            let zeta = transitivity eq (whnf_ty imps B) in
            Some (zeta, imps)
          end
        end
      end
    end
  end

let unify_eq imps A =
  match whnf_ty imps A with
  |- ?eq : _ == ?B =>
    match B with
    | |- _ == _ => Some (eq, imps)
    | _ =>
      match imp_atoms imps B with
      | None => None
      | Some (?imp, ?r, ?xs) =>
        match mk_imp xs Type with
        | (?impT, ?spineT) =>
          match (mk_imp xs spineT, mk_imp xs spineT) with
          | ((?impL, ?spineL), (?impR, ?spineR)) =>
            let C = lambdafy xs (spineL == spineR) in
            assume xi : (imp == C) in
            r := Some xi;
            let imps = impT :: impL :: impR :: imps in
            let zeta = transitivity eq (whnf_ty imps B) in
            Some (zeta, imps)
          end
        end
      end
    end
  end

let imps = ref []

handle
  | equal ?a ?b ⇒
    equal_term !imps a b

  | coerce ?e ?B =>
    let A = typeof e in
    match equal_ty !imps A B with
    | Some ?xi ⇒ Convertible xi
    | None ⇒ NotCoercible
    end

  | coerce_fun ?e =>
    let A = typeof e in
    match unify_prod !imps A with
    | Some (?eq, ?imps) => Convertible eq
    | None => NotCoercible
    end

  | as_prod ?A =>
    match unify_prod !imps A with
    | Some (?eq, ?imps') => 
      imps := imps' ;
      Some eq
    | None => None
    end

  | as_eq ?A =>
    match unify_eq !imps A with
    | Some (?eq, ?imps') => 
      imps := imps' ;
      Some eq
    | None => None
    end

  | whnf ?e => whnf_term !imps e

  | ? : ?Aopt ⇒
    match Aopt with
    | Some ?A =>
      let xs = rev hypotheses in
      match mk_imp xs A with
      | (?imp, ?spine) =>
        imps := imp :: !imps ;
        spine
      end
    end

  | resolve ?e ⇒
    resolver !imps e
end

