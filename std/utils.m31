(** list stuff *)
let rev =
  let rec rev acc = fun lst => match lst with
    | [] => acc
    | ?x :: ?tl => rev (x :: acc) tl
    end
  in rev []

let rec fold f acc lst = match lst with
  | [] => acc
  | ?x :: ?tl => fold f (f acc x) tl
  end

let rec assoc_find x lst = match lst with
  | [] => None
  | (x, ?v) :: _ => Some v
  | _ :: ?lst => assoc_find x lst
  end

let rev_append = fun l1 l2 => fold (fun acc x => x :: acc) l2 l1

(** pair stuff *)
let fst = fun v => match v with
  | (?v, _) => v
  end

let snd = fun v => match v with
  | (_, ?v) => v
  end


