require eq ;;

rule Σ (A type) ({x : A} B type) type

rule pair (A type) ({x : A} B type) (a : A) (b : B{a})
  : Σ A B
;;

rule π₁ (A type) ({x : A} B type) (s : Σ A B)
  : A
;;

rule π₂ (A type) ({x : A} B type) (s : Σ A B)
  : B{π₁ A B s}
;;

rule Σ_β₁ (A type) ({x : A} B type) (a : A) (b : B{a})
  : π₁ A B (pair A B a b) ≡ a : A
;;

eq.add_rule Σ_β₁
;;

rule Σ_β₂ (A type) ({x : A} B type) (a : A) (b : B{a})
  : π₂ A B (pair A B a b) ≡ b : B{a} ;;

eq.add_rule Σ_β₂
;;

rule Σ_ext
  (A type) ({x : A} B type) (s : Σ A B) (t : Σ A B)
  (π₁ A B s ≡ π₁ A B t : A by ξ)
  (eq.add_locally ξ (fun () -> (ζ :? (π₂ A B s ≡ π₂ A B t : B{π₁ A B t} by ??))) )
  (* (convert (π₂ A B s) (congruence B{π₁ A B s} B{π₁ A B t} ξ) ≡ π₂ A B t : B{π₁ A B t})*)
  : s ≡ t : Σ A B
;;

eq.add_rule Σ_ext
;;
