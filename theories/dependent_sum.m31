require eq ;;

rule Σ (A type) ({x : A} B type) type

rule pair (A type) ({x : A} B type) (a : A) (b : B{a})
  : Σ A B
;;

rule π₁ (A type) ({x : A} B type) (s : Σ A B)
  : A
;;

rule π₂ (A type) ({x : A} B type) (s : Σ A B)
  : B{π₁ A B s}
;;

rule Σ_β₁ (A type) ({x : A} B type)
          (A' type) ({x : A'} B' type)
          (a : A') (b : B'{a})
          (A' ≡ A by ξ) ({x : A'} B'{x} ≡ B{convert x ξ} by ζ)
          :?
          (eq.add_locally (derive -> ξ) (fun () ->
           eq.add_locally (derive (x : A') -> ζ{x}) (fun () ->
           π₁ A B (pair A' B' a b) ≡ a : A by ?? ))) ;;
eq.add_rule Σ_β₁ ;;


rule Σ_β₂ (A type) ({x : A} B type)
          (A' type) ({x : A'} B' type)
          (a : A') (b : B'{a})
          (A' ≡ A by ξ) ({x : A'} B'{x} ≡ B{convert x ξ} by ζ)
          :?
          (eq.add_locally (derive -> ξ) (fun () ->
           eq.add_locally (derive (x : A') -> ζ{x}) (fun () ->
           π₂ A B (pair A' B' a b) ≡  b  : B{a} by ??))) ;;
eq.add_rule Σ_β₂ ;;

rule Σ_ext (A type) ({x:A} B type) (s : Σ A B) (t : Σ A B)
  (π₁ A B s ≡ π₁ A B t : A by ξ)
  (convert (π₂ A B s) (congruence B{π₁ A B s} B{π₁ A B t} ξ) ≡
   π₂ A B t : B{π₁ A B t} by ζ)
  : s ≡ t : Σ A B ;;
eq.add_rule Σ_ext ;;

eq.add_rule Σ_ext
;;
