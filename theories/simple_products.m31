require eq;;

rule (×) (A type) (B type) type ;;

rule pair (A type) (B type) (a : A) (b : B) : A × B ;; 

rule fst (A type) (B type) (u : A × B) : A ;;
rule snd (A type) (B type) (u : A × B) : B ;;

rule β_fst (A type) (B type) (s : A) (t : B) : fst A B (pair A B s t) ≡ s : A ;;
eq.add_rule β_fst ;;
rule β_snd (A type) (B type) (s : A) (t : B) : snd A B (pair A B s t) ≡ t : B ;;
eq.add_rule β_snd ;;

rule ext (A type) (B type) 
         (p : A × B) (q : A × B) 
         (fst A B p ≡ fst A B q : A)
         (snd A B p ≡ snd A B q : B)
         : p ≡ q : A × B ;;
eq.add_rule ext ;;