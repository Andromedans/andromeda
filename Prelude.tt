let NONE := val inj 0 ()
let SOME := val fun Y => val inj 1 Y

let equiv := val fun equiv(X) => 
  let _ = op print ["equiv",X]  in

  let fun eqspine (Y) =
    let _ = op print ["eqspine",Y] in
    match Y with
    | [e1,e2] when (e1 = e2) => 
        let _ = op print "alpha-equivalent"  in
        SOME []

    | [(forall e1, f1), (forall e2,f2)] =>
        let w1 = eqspine [e1,e2] in
        let _ = op print "forall domains ok" in
        let w2 =
          lambda x:e1,
            let e3 = f1 `x` in
            let e4 = f2 `x` in
            let e5 = val whnf e3 in
            let e6 = val whnf e4 in
            eqspine [e5, e6]  in
        match [w1, w2] with
        | [inj 1 xs, inj 1 ys] => SOME (xs ++ ys)
        | _                    => op EQUIV Y
        end

    | _ => op EQUIV Y
    end  in

 /* Body of equiv starts here */

 match X with
 | [e1, e2, t] => 
     (match e1 = e2 with
     | true => SOME []
     | false => 
         let t2 = val whnf t  in
         let _ = op print ["t2 = ", t2]  in

         match t2 with
         | _ == _  => SOME []
         | _ when (t2 = t`unit`) => SOME []
         | forall u1, u2 =>
               lambda x : t21, 
                 let a = e1 `x`  in
                 let b = e2 `x`  in
                 let c = u2 `x`  in
                 equiv [a,b,c]
         | _ => let e3 = val whnf e1  in
                let e4 = val whnf e2  in
                let _ = op print ["e3 =", e3, " e4 = ", e4]  in
                match e3 = e4 with
                | true  => SOME []
                | false => eqspine [e3,e4]
                end
         end
     end)
 end
